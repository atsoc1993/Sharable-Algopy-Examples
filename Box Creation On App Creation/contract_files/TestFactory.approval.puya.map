{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCQ;AAA2B;AAA3B;AAFR;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;AAAA;;AAkDK;;AAAA;AAAA;AAAA;;AAAA;AAlDL;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAkDK;;;AAAA;;AAtCA;;AAAA;AAAA;AAAA;;AAAA;AAZL;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAYK;;;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AARL;;;AAAA;AAAA;;AAQK;;;AAAA;;AAJA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAIL;;;AAEQ;AAAA;;AAAA;;AAER;;;AAEe;;AAAA;;AAAA;AAAsB;;;;AAAtB;AAAP;AAtCG;;AAAA;;AAAA;AA0Ce;AACG;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AACG;AAAA;;AAAA;AAEJ;;;AADC;;;;;;;AAHH;;;AAAA;;;AAAA;;;AAQyB;AAC9B;AAAA;;AAAA;AACF;;;;;;AAFgC;;;AAAA;;;AAAA;;;AAM9B;;AAAA;;AAAA;AAIc;AAHhB;;;;;;;;AAFS;;;AAAA;;;AAKO;;;;AAAA;;;;;;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;;;;;;AAAA;AAAA;AAAA;AA5DxB;;AAAA;;AAAA;AAmEQ;;AAAA;;AAAA;AAAuE;;AAAvE;AAA6F;AAAA;;AAAA;AAA7F;AACX;AACA;AACa;;;;;;AADb;;;AAAA;;;AAAA;;AAKR;;;AA1EW;;AAAA;;AAAA;AA8Ee;AACG;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AACG;AAAA;;AAAA;AAEJ;;;AADC;;;;;;;AAHH;;;AAAA;;;AAAA;;;AAQlB;;;AAAA;;;;;;;;AAAA;;;AAAA;;;AAAA;AAtFG;;AAAA;;AAAA;AA4FQ;;AAAA;;AAAsB;AAAA;;AAAA;AAAtB;AACX;AACa;;;;;;AADb;;;AAAA;;;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "contract.TestFactory.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 5 6"
    },
    "7": {
      "op": "bytecblock \"test_contract_child\""
    },
    "29": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "31": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "34": {
      "op": "bytec_0 // \"test_contract_child\"",
      "defined_out": [
        "\"test_contract_child\""
      ],
      "stack_out": [
        "\"test_contract_child\""
      ]
    },
    "35": {
      "op": "intc_1 // 0",
      "defined_out": [
        "\"test_contract_child\"",
        "0"
      ],
      "stack_out": [
        "\"test_contract_child\"",
        "0"
      ]
    },
    "36": {
      "op": "app_global_put",
      "stack_out": []
    },
    "37": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "39": {
      "op": "bz main_after_if_else@9",
      "stack_out": []
    },
    "42": {
      "op": "pushbytess 0x50dc3a0e 0xfa19bc45 0xbb6dfcbd 0xddf77262 // method \"update_or_delete()void\", method \"set_test_contract_child(application)void\", method \"create_test_contract_child_and_box(pay)void\", method \"create_test_contract_child_call_do_something_else(pay)void\"",
      "defined_out": [
        "Method(create_test_contract_child_and_box(pay)void)",
        "Method(create_test_contract_child_call_do_something_else(pay)void)",
        "Method(set_test_contract_child(application)void)",
        "Method(update_or_delete()void)"
      ],
      "stack_out": [
        "Method(update_or_delete()void)",
        "Method(set_test_contract_child(application)void)",
        "Method(create_test_contract_child_and_box(pay)void)",
        "Method(create_test_contract_child_call_do_something_else(pay)void)"
      ]
    },
    "64": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(create_test_contract_child_and_box(pay)void)",
        "Method(create_test_contract_child_call_do_something_else(pay)void)",
        "Method(set_test_contract_child(application)void)",
        "Method(update_or_delete()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(update_or_delete()void)",
        "Method(set_test_contract_child(application)void)",
        "Method(create_test_contract_child_and_box(pay)void)",
        "Method(create_test_contract_child_call_do_something_else(pay)void)",
        "tmp%2#0"
      ]
    },
    "67": {
      "op": "match main_update_or_delete_route@5 main_set_test_contract_child_route@6 main_create_test_contract_child_and_box_route@7 main_create_test_contract_child_call_do_something_else_route@8",
      "stack_out": []
    },
    "77": {
      "block": "main_after_if_else@9",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "78": {
      "op": "return",
      "stack_out": []
    },
    "79": {
      "block": "main_create_test_contract_child_call_do_something_else_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "81": {
      "op": "!",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "82": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "83": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "85": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "86": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "88": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "1"
      ]
    },
    "89": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "90": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "91": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ]
    },
    "93": {
      "op": "intc_0 // pay",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ]
    },
    "94": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "95": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "96": {
      "callsub": "contract.TestFactory.create_test_contract_child_call_do_something_else",
      "op": "callsub create_test_contract_child_call_do_something_else",
      "stack_out": []
    },
    "99": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "100": {
      "op": "return",
      "stack_out": []
    },
    "101": {
      "block": "main_create_test_contract_child_and_box_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "103": {
      "op": "!",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "104": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "105": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "107": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "108": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "110": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "1"
      ]
    },
    "111": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "112": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "113": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "115": {
      "op": "intc_0 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "116": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "117": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "118": {
      "callsub": "contract.TestFactory.create_test_contract_child_and_box",
      "op": "callsub create_test_contract_child_and_box",
      "stack_out": []
    },
    "121": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "122": {
      "op": "return",
      "stack_out": []
    },
    "123": {
      "block": "main_set_test_contract_child_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "125": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "126": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "127": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "129": {
      "op": "!",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "130": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "131": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "134": {
      "op": "btoi",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "135": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "137": {
      "callsub": "contract.TestFactory.set_test_contract_child",
      "op": "callsub set_test_contract_child",
      "stack_out": []
    },
    "140": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "141": {
      "op": "return",
      "stack_out": []
    },
    "142": {
      "block": "main_update_or_delete_route@5",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "143": {
      "op": "txn OnCompletion",
      "defined_out": [
        "1",
        "tmp%3#0"
      ],
      "stack_out": [
        "1",
        "tmp%3#0"
      ]
    },
    "145": {
      "op": "shl",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "146": {
      "op": "pushint 48 // 48",
      "defined_out": [
        "48",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "48"
      ]
    },
    "148": {
      "op": "&",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "149": {
      "error": "OnCompletion is not one of UpdateApplication, DeleteApplication",
      "op": "assert // OnCompletion is not one of UpdateApplication, DeleteApplication",
      "stack_out": []
    },
    "150": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "152": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "153": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "154": {
      "op": "return",
      "stack_out": []
    },
    "155": {
      "subroutine": "contract.TestFactory.set_test_contract_child",
      "params": {
        "test_contract_child_app#0": "uint64"
      },
      "block": "set_test_contract_child",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "158": {
      "op": "bytec_0 // \"test_contract_child\"",
      "defined_out": [
        "\"test_contract_child\""
      ],
      "stack_out": [
        "\"test_contract_child\""
      ]
    },
    "159": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"test_contract_child\"",
        "test_contract_child_app#0 (copy)"
      ],
      "stack_out": [
        "\"test_contract_child\"",
        "test_contract_child_app#0 (copy)"
      ]
    },
    "161": {
      "op": "app_global_put",
      "stack_out": []
    },
    "162": {
      "retsub": true,
      "op": "retsub"
    },
    "163": {
      "subroutine": "contract.TestFactory.create_test_contract_child_and_box",
      "params": {
        "mbr_payment#0": "uint64"
      },
      "block": "create_test_contract_child_and_box",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "166": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbr_payment#0 (copy)"
      ],
      "stack_out": [
        "mbr_payment#0 (copy)"
      ]
    },
    "168": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "170": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "171": {
      "op": "pushint 1000000 // 1000000",
      "defined_out": [
        "1000000",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "1000000"
      ]
    },
    "175": {
      "op": ">=",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "176": {
      "op": "assert",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "177": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#1"
      ]
    },
    "179": {
      "op": "acct_params_get AcctMinBalance",
      "defined_out": [
        "check%0#0",
        "pre_mbr#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0",
        "check%0#0"
      ]
    },
    "181": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0"
      ]
    },
    "182": {
      "op": "itxn_begin"
    },
    "183": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "pre_mbr#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0",
        "0"
      ]
    },
    "184": {
      "op": "bytec_0 // \"test_contract_child\"",
      "defined_out": [
        "\"test_contract_child\"",
        "0",
        "pre_mbr#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0",
        "0",
        "\"test_contract_child\""
      ]
    },
    "185": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "pre_mbr#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "186": {
      "error": "check self.test_contract_child exists",
      "op": "assert // check self.test_contract_child exists",
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0",
        "maybe_value%0#0"
      ]
    },
    "187": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "pre_mbr#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "188": {
      "op": "app_params_get AppApprovalProgram",
      "defined_out": [
        "check%0#0",
        "maybe_value%0#0",
        "pre_mbr#0",
        "tmp%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0",
        "maybe_value%0#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "190": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0",
        "maybe_value%0#0",
        "value%0#0"
      ]
    },
    "191": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0",
        "value%0#0",
        "maybe_value%0#0"
      ]
    },
    "192": {
      "op": "app_params_get AppClearStateProgram",
      "defined_out": [
        "check%1#0",
        "pre_mbr#0",
        "tmp%0#0",
        "value%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0",
        "value%0#0",
        "value%1#0",
        "check%1#0"
      ]
    },
    "194": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0",
        "value%0#0",
        "value%1#0"
      ]
    },
    "195": {
      "op": "intc_2 // 5",
      "defined_out": [
        "5",
        "pre_mbr#0",
        "tmp%0#0",
        "value%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0",
        "value%0#0",
        "value%1#0",
        "5"
      ]
    },
    "196": {
      "op": "itxn_field GlobalNumUint",
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0",
        "value%0#0",
        "value%1#0"
      ]
    },
    "198": {
      "op": "intc_2 // 5",
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0",
        "value%0#0",
        "value%1#0",
        "5"
      ]
    },
    "199": {
      "op": "itxn_field GlobalNumByteSlice",
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0",
        "value%0#0",
        "value%1#0"
      ]
    },
    "201": {
      "op": "itxn_field ClearStateProgramPages",
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0",
        "value%0#0"
      ]
    },
    "203": {
      "op": "itxn_field ApprovalProgramPages",
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0"
      ]
    },
    "205": {
      "op": "intc_3 // appl",
      "defined_out": [
        "appl",
        "pre_mbr#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0",
        "appl"
      ]
    },
    "206": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0"
      ]
    },
    "208": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0",
        "0"
      ]
    },
    "209": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0"
      ]
    },
    "211": {
      "op": "itxn_submit"
    },
    "212": {
      "op": "itxn CreatedApplicationID",
      "defined_out": [
        "create_child_tx.CreatedApplicationID#0",
        "pre_mbr#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0",
        "create_child_tx.CreatedApplicationID#0"
      ]
    },
    "214": {
      "op": "itxn_begin"
    },
    "215": {
      "op": "dup",
      "defined_out": [
        "create_child_tx.CreatedApplicationID#0",
        "create_child_tx.CreatedApplicationID#0 (copy)",
        "pre_mbr#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0",
        "create_child_tx.CreatedApplicationID#0",
        "create_child_tx.CreatedApplicationID#0 (copy)"
      ]
    },
    "216": {
      "op": "app_params_get AppAddress",
      "defined_out": [
        "check%2#0",
        "create_child_tx.CreatedApplicationID#0",
        "pre_mbr#0",
        "tmp%0#0",
        "value%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0",
        "create_child_tx.CreatedApplicationID#0",
        "value%2#0",
        "check%2#0"
      ]
    },
    "218": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0",
        "create_child_tx.CreatedApplicationID#0",
        "value%2#0"
      ]
    },
    "219": {
      "op": "global MinBalance",
      "defined_out": [
        "create_child_tx.CreatedApplicationID#0",
        "inner_txn_params%1%%param_Amount_idx_0#0",
        "pre_mbr#0",
        "tmp%0#0",
        "value%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0",
        "create_child_tx.CreatedApplicationID#0",
        "value%2#0",
        "inner_txn_params%1%%param_Amount_idx_0#0"
      ]
    },
    "221": {
      "op": "itxn_field Amount",
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0",
        "create_child_tx.CreatedApplicationID#0",
        "value%2#0"
      ]
    },
    "223": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0",
        "create_child_tx.CreatedApplicationID#0"
      ]
    },
    "225": {
      "op": "intc_0 // pay",
      "defined_out": [
        "create_child_tx.CreatedApplicationID#0",
        "pay",
        "pre_mbr#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0",
        "create_child_tx.CreatedApplicationID#0",
        "pay"
      ]
    },
    "226": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0",
        "create_child_tx.CreatedApplicationID#0"
      ]
    },
    "228": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0",
        "create_child_tx.CreatedApplicationID#0",
        "0"
      ]
    },
    "229": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0",
        "create_child_tx.CreatedApplicationID#0"
      ]
    },
    "231": {
      "op": "itxn_submit"
    },
    "232": {
      "op": "itxn Amount",
      "defined_out": [
        "create_child_tx.CreatedApplicationID#0",
        "fund_account_mbr_before_method_is_called.Amount#0",
        "pre_mbr#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0",
        "create_child_tx.CreatedApplicationID#0",
        "fund_account_mbr_before_method_is_called.Amount#0"
      ]
    },
    "234": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0",
        "create_child_tx.CreatedApplicationID#0",
        "fund_account_mbr_before_method_is_called.Amount#0",
        "create_child_tx.CreatedApplicationID#0 (copy)"
      ]
    },
    "236": {
      "op": "app_params_get AppAddress",
      "defined_out": [
        "check%3#0",
        "create_child_tx.CreatedApplicationID#0",
        "fund_account_mbr_before_method_is_called.Amount#0",
        "pre_mbr#0",
        "tmp%0#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0",
        "create_child_tx.CreatedApplicationID#0",
        "fund_account_mbr_before_method_is_called.Amount#0",
        "value%3#0",
        "check%3#0"
      ]
    },
    "238": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0",
        "create_child_tx.CreatedApplicationID#0",
        "fund_account_mbr_before_method_is_called.Amount#0",
        "value%3#0"
      ]
    },
    "239": {
      "op": "itxn_begin"
    },
    "240": {
      "op": "pushint 100000 // 100000",
      "defined_out": [
        "100000",
        "create_child_tx.CreatedApplicationID#0",
        "fund_account_mbr_before_method_is_called.Amount#0",
        "pre_mbr#0",
        "tmp%0#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0",
        "create_child_tx.CreatedApplicationID#0",
        "fund_account_mbr_before_method_is_called.Amount#0",
        "value%3#0",
        "100000"
      ]
    },
    "244": {
      "op": "itxn_field Amount",
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0",
        "create_child_tx.CreatedApplicationID#0",
        "fund_account_mbr_before_method_is_called.Amount#0",
        "value%3#0"
      ]
    },
    "246": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0",
        "create_child_tx.CreatedApplicationID#0",
        "fund_account_mbr_before_method_is_called.Amount#0"
      ]
    },
    "248": {
      "op": "intc_0 // pay",
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0",
        "create_child_tx.CreatedApplicationID#0",
        "fund_account_mbr_before_method_is_called.Amount#0",
        "pay"
      ]
    },
    "249": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0",
        "create_child_tx.CreatedApplicationID#0",
        "fund_account_mbr_before_method_is_called.Amount#0"
      ]
    },
    "251": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0",
        "create_child_tx.CreatedApplicationID#0",
        "fund_account_mbr_before_method_is_called.Amount#0",
        "0"
      ]
    },
    "252": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0",
        "create_child_tx.CreatedApplicationID#0",
        "fund_account_mbr_before_method_is_called.Amount#0"
      ]
    },
    "254": {
      "op": "itxn_next"
    },
    "255": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0",
        "fund_account_mbr_before_method_is_called.Amount#0",
        "create_child_tx.CreatedApplicationID#0"
      ]
    },
    "256": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0",
        "fund_account_mbr_before_method_is_called.Amount#0"
      ]
    },
    "258": {
      "op": "pushbytes 0x90fafbe8 // method \"create_box(pay)uint64\"",
      "defined_out": [
        "Method(create_box(pay)uint64)",
        "fund_account_mbr_before_method_is_called.Amount#0",
        "pre_mbr#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0",
        "fund_account_mbr_before_method_is_called.Amount#0",
        "Method(create_box(pay)uint64)"
      ]
    },
    "264": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0",
        "fund_account_mbr_before_method_is_called.Amount#0"
      ]
    },
    "266": {
      "op": "intc_3 // appl",
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0",
        "fund_account_mbr_before_method_is_called.Amount#0",
        "appl"
      ]
    },
    "267": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0",
        "fund_account_mbr_before_method_is_called.Amount#0"
      ]
    },
    "269": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0",
        "fund_account_mbr_before_method_is_called.Amount#0",
        "0"
      ]
    },
    "270": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0",
        "fund_account_mbr_before_method_is_called.Amount#0"
      ]
    },
    "272": {
      "op": "itxn_submit"
    },
    "273": {
      "op": "gitxn 1 LastLog",
      "defined_out": [
        "awst_tmp%0#0",
        "fund_account_mbr_before_method_is_called.Amount#0",
        "pre_mbr#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0",
        "fund_account_mbr_before_method_is_called.Amount#0",
        "awst_tmp%0#0"
      ]
    },
    "276": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)",
        "fund_account_mbr_before_method_is_called.Amount#0",
        "pre_mbr#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0",
        "fund_account_mbr_before_method_is_called.Amount#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "277": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "fund_account_mbr_before_method_is_called.Amount#0",
        "pre_mbr#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0",
        "fund_account_mbr_before_method_is_called.Amount#0",
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "280": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0",
        "fund_account_mbr_before_method_is_called.Amount#0",
        "tmp%2#0",
        "awst_tmp%0#0"
      ]
    },
    "281": {
      "op": "extract 0 4",
      "defined_out": [
        "fund_account_mbr_before_method_is_called.Amount#0",
        "pre_mbr#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0",
        "fund_account_mbr_before_method_is_called.Amount#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "284": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "fund_account_mbr_before_method_is_called.Amount#0",
        "pre_mbr#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0",
        "fund_account_mbr_before_method_is_called.Amount#0",
        "tmp%2#0",
        "tmp%3#0",
        "0x151f7c75"
      ]
    },
    "290": {
      "op": "==",
      "defined_out": [
        "fund_account_mbr_before_method_is_called.Amount#0",
        "pre_mbr#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0",
        "fund_account_mbr_before_method_is_called.Amount#0",
        "tmp%2#0",
        "tmp%4#0"
      ]
    },
    "291": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0",
        "fund_account_mbr_before_method_is_called.Amount#0",
        "tmp%2#0"
      ]
    },
    "292": {
      "op": "btoi",
      "defined_out": [
        "excess_mbr_returned#0",
        "fund_account_mbr_before_method_is_called.Amount#0",
        "pre_mbr#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0",
        "fund_account_mbr_before_method_is_called.Amount#0",
        "excess_mbr_returned#0"
      ]
    },
    "293": {
      "op": "global CurrentApplicationAddress",
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0",
        "fund_account_mbr_before_method_is_called.Amount#0",
        "excess_mbr_returned#0",
        "tmp%0#1"
      ]
    },
    "295": {
      "op": "acct_params_get AcctMinBalance",
      "defined_out": [
        "check%0#0",
        "excess_mbr_returned#0",
        "fund_account_mbr_before_method_is_called.Amount#0",
        "post_mbr#0",
        "pre_mbr#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0",
        "fund_account_mbr_before_method_is_called.Amount#0",
        "excess_mbr_returned#0",
        "post_mbr#0",
        "check%0#0"
      ]
    },
    "297": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "tmp%0#0",
        "pre_mbr#0",
        "fund_account_mbr_before_method_is_called.Amount#0",
        "excess_mbr_returned#0",
        "post_mbr#0"
      ]
    },
    "298": {
      "op": "uncover 4",
      "stack_out": [
        "pre_mbr#0",
        "fund_account_mbr_before_method_is_called.Amount#0",
        "excess_mbr_returned#0",
        "post_mbr#0",
        "tmp%0#0"
      ]
    },
    "300": {
      "op": "uncover 3",
      "stack_out": [
        "pre_mbr#0",
        "excess_mbr_returned#0",
        "post_mbr#0",
        "tmp%0#0",
        "fund_account_mbr_before_method_is_called.Amount#0"
      ]
    },
    "302": {
      "op": "-",
      "defined_out": [
        "excess_mbr_returned#0",
        "post_mbr#0",
        "pre_mbr#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "pre_mbr#0",
        "excess_mbr_returned#0",
        "post_mbr#0",
        "tmp%7#0"
      ]
    },
    "303": {
      "op": "global MinBalance",
      "defined_out": [
        "excess_mbr_returned#0",
        "post_mbr#0",
        "pre_mbr#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "pre_mbr#0",
        "excess_mbr_returned#0",
        "post_mbr#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "305": {
      "op": "-",
      "defined_out": [
        "excess_mbr_returned#0",
        "post_mbr#0",
        "pre_mbr#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "pre_mbr#0",
        "excess_mbr_returned#0",
        "post_mbr#0",
        "tmp%9#0"
      ]
    },
    "306": {
      "op": "swap",
      "stack_out": [
        "pre_mbr#0",
        "excess_mbr_returned#0",
        "tmp%9#0",
        "post_mbr#0"
      ]
    },
    "307": {
      "op": "uncover 3",
      "stack_out": [
        "excess_mbr_returned#0",
        "tmp%9#0",
        "post_mbr#0",
        "pre_mbr#0"
      ]
    },
    "309": {
      "op": "-",
      "defined_out": [
        "excess_mbr_returned#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "excess_mbr_returned#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "310": {
      "op": "-",
      "defined_out": [
        "excess_mbr_returned#0",
        "mbr_diff#0"
      ],
      "stack_out": [
        "excess_mbr_returned#0",
        "mbr_diff#0"
      ]
    },
    "311": {
      "op": "+",
      "stack_out": [
        "mbr_diff#0"
      ]
    },
    "312": {
      "op": "itxn_begin"
    },
    "313": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%3%%param_Receiver_idx_0#0",
        "mbr_diff#0"
      ],
      "stack_out": [
        "mbr_diff#0",
        "inner_txn_params%3%%param_Receiver_idx_0#0"
      ]
    },
    "315": {
      "op": "itxn_field Receiver"
    },
    "317": {
      "op": "itxn_field Amount",
      "stack_out": []
    },
    "319": {
      "op": "intc_0 // pay",
      "stack_out": [
        "pay"
      ]
    },
    "320": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "322": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0"
      ]
    },
    "323": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "325": {
      "op": "itxn_submit"
    },
    "326": {
      "retsub": true,
      "op": "retsub"
    },
    "327": {
      "subroutine": "contract.TestFactory.create_test_contract_child_call_do_something_else",
      "params": {
        "mbr_payment#0": "uint64"
      },
      "block": "create_test_contract_child_call_do_something_else",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "330": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "332": {
      "op": "acct_params_get AcctMinBalance",
      "defined_out": [
        "check%0#0",
        "pre_mbr#0"
      ],
      "stack_out": [
        "pre_mbr#0",
        "check%0#0"
      ]
    },
    "334": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "pre_mbr#0"
      ]
    },
    "335": {
      "op": "itxn_begin"
    },
    "336": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "pre_mbr#0"
      ],
      "stack_out": [
        "pre_mbr#0",
        "0"
      ]
    },
    "337": {
      "op": "bytec_0 // \"test_contract_child\"",
      "defined_out": [
        "\"test_contract_child\"",
        "0",
        "pre_mbr#0"
      ],
      "stack_out": [
        "pre_mbr#0",
        "0",
        "\"test_contract_child\""
      ]
    },
    "338": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "pre_mbr#0"
      ],
      "stack_out": [
        "pre_mbr#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "339": {
      "error": "check self.test_contract_child exists",
      "op": "assert // check self.test_contract_child exists",
      "stack_out": [
        "pre_mbr#0",
        "maybe_value%0#0"
      ]
    },
    "340": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "pre_mbr#0"
      ],
      "stack_out": [
        "pre_mbr#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "341": {
      "op": "app_params_get AppApprovalProgram",
      "defined_out": [
        "check%0#0",
        "maybe_value%0#0",
        "pre_mbr#0",
        "value%0#0"
      ],
      "stack_out": [
        "pre_mbr#0",
        "maybe_value%0#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "343": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "pre_mbr#0",
        "maybe_value%0#0",
        "value%0#0"
      ]
    },
    "344": {
      "op": "swap",
      "stack_out": [
        "pre_mbr#0",
        "value%0#0",
        "maybe_value%0#0"
      ]
    },
    "345": {
      "op": "app_params_get AppClearStateProgram",
      "defined_out": [
        "check%1#0",
        "pre_mbr#0",
        "value%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "pre_mbr#0",
        "value%0#0",
        "value%1#0",
        "check%1#0"
      ]
    },
    "347": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "pre_mbr#0",
        "value%0#0",
        "value%1#0"
      ]
    },
    "348": {
      "op": "intc_2 // 5",
      "defined_out": [
        "5",
        "pre_mbr#0",
        "value%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "pre_mbr#0",
        "value%0#0",
        "value%1#0",
        "5"
      ]
    },
    "349": {
      "op": "itxn_field GlobalNumUint",
      "stack_out": [
        "pre_mbr#0",
        "value%0#0",
        "value%1#0"
      ]
    },
    "351": {
      "op": "intc_2 // 5",
      "stack_out": [
        "pre_mbr#0",
        "value%0#0",
        "value%1#0",
        "5"
      ]
    },
    "352": {
      "op": "itxn_field GlobalNumByteSlice",
      "stack_out": [
        "pre_mbr#0",
        "value%0#0",
        "value%1#0"
      ]
    },
    "354": {
      "op": "itxn_field ClearStateProgramPages",
      "stack_out": [
        "pre_mbr#0",
        "value%0#0"
      ]
    },
    "356": {
      "op": "itxn_field ApprovalProgramPages",
      "stack_out": [
        "pre_mbr#0"
      ]
    },
    "358": {
      "op": "intc_3 // appl",
      "defined_out": [
        "appl",
        "pre_mbr#0"
      ],
      "stack_out": [
        "pre_mbr#0",
        "appl"
      ]
    },
    "359": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "pre_mbr#0"
      ]
    },
    "361": {
      "op": "intc_1 // 0",
      "stack_out": [
        "pre_mbr#0",
        "0"
      ]
    },
    "362": {
      "op": "itxn_field Fee",
      "stack_out": [
        "pre_mbr#0"
      ]
    },
    "364": {
      "op": "itxn_submit"
    },
    "365": {
      "op": "itxn CreatedApplicationID",
      "defined_out": [
        "create_child_tx.CreatedApplicationID#0",
        "pre_mbr#0"
      ],
      "stack_out": [
        "pre_mbr#0",
        "create_child_tx.CreatedApplicationID#0"
      ]
    },
    "367": {
      "op": "itxn_begin"
    },
    "368": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "pre_mbr#0"
      ]
    },
    "370": {
      "op": "pushbytes 0x86de96f1 // method \"do_something_else_without_boxes()void\"",
      "defined_out": [
        "Method(do_something_else_without_boxes()void)",
        "pre_mbr#0"
      ],
      "stack_out": [
        "pre_mbr#0",
        "Method(do_something_else_without_boxes()void)"
      ]
    },
    "376": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "pre_mbr#0"
      ]
    },
    "378": {
      "op": "intc_3 // appl",
      "stack_out": [
        "pre_mbr#0",
        "appl"
      ]
    },
    "379": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "pre_mbr#0"
      ]
    },
    "381": {
      "op": "intc_1 // 0",
      "stack_out": [
        "pre_mbr#0",
        "0"
      ]
    },
    "382": {
      "op": "itxn_field Fee",
      "stack_out": [
        "pre_mbr#0"
      ]
    },
    "384": {
      "op": "itxn_submit"
    },
    "385": {
      "op": "global CurrentApplicationAddress",
      "stack_out": [
        "pre_mbr#0",
        "tmp%0#1"
      ]
    },
    "387": {
      "op": "acct_params_get AcctMinBalance",
      "defined_out": [
        "check%0#0",
        "post_mbr#0",
        "pre_mbr#0"
      ],
      "stack_out": [
        "pre_mbr#0",
        "post_mbr#0",
        "check%0#0"
      ]
    },
    "389": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "pre_mbr#0",
        "post_mbr#0"
      ]
    },
    "390": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbr_payment#0 (copy)",
        "post_mbr#0",
        "pre_mbr#0"
      ],
      "stack_out": [
        "pre_mbr#0",
        "post_mbr#0",
        "mbr_payment#0 (copy)"
      ]
    },
    "392": {
      "op": "gtxns Amount",
      "defined_out": [
        "post_mbr#0",
        "pre_mbr#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "pre_mbr#0",
        "post_mbr#0",
        "tmp%0#0"
      ]
    },
    "394": {
      "op": "swap",
      "stack_out": [
        "pre_mbr#0",
        "tmp%0#0",
        "post_mbr#0"
      ]
    },
    "395": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "post_mbr#0",
        "pre_mbr#0"
      ]
    },
    "397": {
      "op": "-",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "398": {
      "op": "-",
      "defined_out": [
        "mbr_diff#0"
      ],
      "stack_out": [
        "mbr_diff#0"
      ]
    },
    "399": {
      "op": "itxn_begin"
    },
    "400": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%2%%param_Receiver_idx_0#0",
        "mbr_diff#0"
      ],
      "stack_out": [
        "mbr_diff#0",
        "inner_txn_params%2%%param_Receiver_idx_0#0"
      ]
    },
    "402": {
      "op": "itxn_field Receiver"
    },
    "404": {
      "op": "itxn_field Amount",
      "stack_out": []
    },
    "406": {
      "op": "intc_0 // pay",
      "defined_out": [
        "pay"
      ],
      "stack_out": [
        "pay"
      ]
    },
    "407": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "409": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0"
      ]
    },
    "410": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "412": {
      "op": "itxn_submit"
    },
    "413": {
      "retsub": true,
      "op": "retsub"
    }
  }
}