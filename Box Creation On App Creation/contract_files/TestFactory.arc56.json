{
    "name": "TestFactory",
    "structs": {},
    "methods": [
        {
            "name": "update_or_delete",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "UpdateApplication",
                    "DeleteApplication"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_test_contract_child",
            "args": [
                {
                    "type": "application",
                    "name": "test_contract_child_app"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "create_test_contract_child_and_box",
            "args": [
                {
                    "type": "pay",
                    "name": "mbr_payment"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "create_test_contract_child_call_do_something_else",
            "args": [
                {
                    "type": "pay",
                    "name": "mbr_payment"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 1,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "test_contract_child": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dGVzdF9jb250cmFjdF9jaGlsZA=="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        82,
                        104,
                        126
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        149
                    ],
                    "errorMessage": "OnCompletion is not one of UpdateApplication, DeleteApplication"
                },
                {
                    "pc": [
                        181,
                        297,
                        334,
                        389
                    ],
                    "errorMessage": "account funded"
                },
                {
                    "pc": [
                        190,
                        194,
                        218,
                        238,
                        343,
                        347
                    ],
                    "errorMessage": "application exists"
                },
                {
                    "pc": [
                        291
                    ],
                    "errorMessage": "application log value is not the result of an ABI return"
                },
                {
                    "pc": [
                        130
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        85,
                        107,
                        152
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        186,
                        339
                    ],
                    "errorMessage": "check self.test_contract_child exists"
                },
                {
                    "pc": [
                        95,
                        117
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAEAQAFBiYBE3Rlc3RfY29udHJhY3RfY2hpbGQxGEAAAygjZzEbQQAjggQEUNw6DgT6GbxFBLtt/L0E3fdyYjYaAI4EAEEALgAYAAIjQzEZFEQxGEQxFiIJSTgQIhJEiADkIkMxGRREMRhEMRYiCUk4ECISRIgAKiJDMRkURDEYFEQ2GgEXwDKIAA8iQyIxGZCBMBpEMRhEIkOKAQAoi/9niYoBAIv/OAhJgcCEPQ9EMgpzAUSxIyhlRElyAERMcgFEJLI0JLI1skKyQCWyECOyAbO0PbFJcghEMgGyCLIHIrIQI7IBs7QISwFyCESxgaCNBrIIsgcishAjsgG2TLIYgASQ+vvosholshAjsgGztwE+SVcEAExXAASABBUffHUSRBcyCnMBRE8ETwMJMgEJTE8DCQkIsTEAsgeyCCKyECOyAbOJigEAMgpzAUSxIyhlRElyAERMcgFEJLI0JLI1skKyQCWyECOyAbO0PbGyGIAEht6W8bIaJbIQI7IBszIKcwFEi/84CExPAgkJsTEAsgeyCCKyECOyAbOJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 10,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}