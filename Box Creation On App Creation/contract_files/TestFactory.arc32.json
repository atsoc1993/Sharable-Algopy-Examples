{
    "hints": {
        "update_or_delete()void": {
            "call_config": {
                "update_application": "CALL",
                "delete_application": "CALL"
            }
        },
        "set_test_contract_child(application)void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "create_test_contract_child_and_box(pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "create_test_contract_child_call_do_something_else(pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 1
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "test_contract_child": {
                    "type": "uint64",
                    "key": "test_contract_child"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "TestFactory",
        "methods": [
            {
                "name": "update_or_delete",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "set_test_contract_child",
                "args": [
                    {
                        "type": "application",
                        "name": "test_contract_child_app"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "create_test_contract_child_and_box",
                "args": [
                    {
                        "type": "pay",
                        "name": "mbr_payment"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "create_test_contract_child_call_do_something_else",
                "args": [
                    {
                        "type": "pay",
                        "name": "mbr_payment"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}