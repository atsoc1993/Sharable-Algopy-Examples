{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOQ;AAAqB;;;;;;;;;;AAArB;AACA;AAAqB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAArB;AAJR;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;AAOK;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;AAAA;;;AAEkB;AAAA;AACgB;;AAAA;AAAA;AAChB;AAAA;AAAA;AAJlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;;;AAAA;;;AAEkB;AAAA;AACiB;AAAA;AAAA;AACjB;AAAA;AAAA;AAJlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;;;AAAA;;;AAEkB;AAAA;AACiB;AAAA;AAAA;AACjB;AAAA;AAAA;AAJlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;;;AAAA;;;AAEU;AAA8C;AAA9C;AAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAYU;;AAAA;;AAAA;AATP;;AAAA;;AAAA;;AAAqD;;AAArD;AASO;;AAAA;;AAAA;AAPP;AACa;;AACF;;AAAA;;AAAsB;;AAAA;;AAAA;AAAtB;;;;;AAFX;;;AAAA;;;;AAAA;AALH;AAAA;AAYU;;AAAA;;AAAA;AAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;AAAA;;;AAEG;AAAA;AAAA;AAFH;AAAA;AAIA;;;AAAA;;;AAEG;AAAA;AAAA;AAFH;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 64 32"
    },
    "6": {
      "op": "bytecblock 0x151f7c75 \"test_global_1\" \"test_global_2\""
    },
    "41": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "43": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "46": {
      "op": "bytec_1 // \"test_global_1\"",
      "defined_out": [
        "\"test_global_1\""
      ],
      "stack_out": [
        "\"test_global_1\""
      ]
    },
    "47": {
      "op": "pushbytes 0x0000000000000000",
      "defined_out": [
        "\"test_global_1\"",
        "0x0000000000000000"
      ],
      "stack_out": [
        "\"test_global_1\"",
        "0x0000000000000000"
      ]
    },
    "57": {
      "op": "app_global_put",
      "stack_out": []
    },
    "58": {
      "op": "bytec_2 // \"test_global_2\"",
      "defined_out": [
        "\"test_global_2\""
      ],
      "stack_out": [
        "\"test_global_2\""
      ]
    },
    "59": {
      "op": "pushbytes 0x0000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "\"test_global_2\"",
        "0x0000000000000000000000000000000000000000000000000000000000000000"
      ],
      "stack_out": [
        "\"test_global_2\"",
        "0x0000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "93": {
      "op": "app_global_put",
      "stack_out": []
    },
    "94": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "96": {
      "op": "bz main___algopy_default_create@20",
      "stack_out": []
    },
    "99": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "101": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "102": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "103": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "105": {
      "op": "assert",
      "stack_out": []
    },
    "106": {
      "op": "pushbytess 0xb83722d9 0x183e0f6d 0x6463ab84 0xf89eaf82 0x5838b2be 0xdcf95838 0x8359088c 0x48ed7393 0xa812ecf2 0x0300a005 0x816613ad // method \"test_arc4_uint64(byte[])uint64\", method \"test_arc4_uint256(byte[])uint256\", method \"test_biguint(byte[])uint512\", method \"test_arc4_uint64_w_padding(byte[])uint64\", method \"test_arc4_uint256_w_padding(byte[])uint256\", method \"test_bigint_w_padding(byte[])uint512\", method \"test_math_on_unresolved_arc4_uint64(byte[])uint64\", method \"test_storage_on_resolved_arc4_uint64(byte[],pay)void\", method \"get_mbr()uint64\", method \"set_arc4_uint64_int_as_global(byte[])void\", method \"set_arc4_uint256_int_as_global(byte[])void\"",
      "defined_out": [
        "Method(get_mbr()uint64)",
        "Method(set_arc4_uint256_int_as_global(byte[])void)",
        "Method(set_arc4_uint64_int_as_global(byte[])void)",
        "Method(test_arc4_uint256(byte[])uint256)",
        "Method(test_arc4_uint256_w_padding(byte[])uint256)",
        "Method(test_arc4_uint64(byte[])uint64)",
        "Method(test_arc4_uint64_w_padding(byte[])uint64)",
        "Method(test_bigint_w_padding(byte[])uint512)",
        "Method(test_biguint(byte[])uint512)",
        "Method(test_math_on_unresolved_arc4_uint64(byte[])uint64)",
        "Method(test_storage_on_resolved_arc4_uint64(byte[],pay)void)"
      ],
      "stack_out": [
        "Method(test_arc4_uint64(byte[])uint64)",
        "Method(test_arc4_uint256(byte[])uint256)",
        "Method(test_biguint(byte[])uint512)",
        "Method(test_arc4_uint64_w_padding(byte[])uint64)",
        "Method(test_arc4_uint256_w_padding(byte[])uint256)",
        "Method(test_bigint_w_padding(byte[])uint512)",
        "Method(test_math_on_unresolved_arc4_uint64(byte[])uint64)",
        "Method(test_storage_on_resolved_arc4_uint64(byte[],pay)void)",
        "Method(get_mbr()uint64)",
        "Method(set_arc4_uint64_int_as_global(byte[])void)",
        "Method(set_arc4_uint256_int_as_global(byte[])void)"
      ]
    },
    "163": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(get_mbr()uint64)",
        "Method(set_arc4_uint256_int_as_global(byte[])void)",
        "Method(set_arc4_uint64_int_as_global(byte[])void)",
        "Method(test_arc4_uint256(byte[])uint256)",
        "Method(test_arc4_uint256_w_padding(byte[])uint256)",
        "Method(test_arc4_uint64(byte[])uint64)",
        "Method(test_arc4_uint64_w_padding(byte[])uint64)",
        "Method(test_bigint_w_padding(byte[])uint512)",
        "Method(test_biguint(byte[])uint512)",
        "Method(test_math_on_unresolved_arc4_uint64(byte[])uint64)",
        "Method(test_storage_on_resolved_arc4_uint64(byte[],pay)void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "Method(test_arc4_uint64(byte[])uint64)",
        "Method(test_arc4_uint256(byte[])uint256)",
        "Method(test_biguint(byte[])uint512)",
        "Method(test_arc4_uint64_w_padding(byte[])uint64)",
        "Method(test_arc4_uint256_w_padding(byte[])uint256)",
        "Method(test_bigint_w_padding(byte[])uint512)",
        "Method(test_math_on_unresolved_arc4_uint64(byte[])uint64)",
        "Method(test_storage_on_resolved_arc4_uint64(byte[],pay)void)",
        "Method(get_mbr()uint64)",
        "Method(set_arc4_uint64_int_as_global(byte[])void)",
        "Method(set_arc4_uint256_int_as_global(byte[])void)",
        "tmp%6#0"
      ]
    },
    "166": {
      "op": "match test_arc4_uint64 test_arc4_uint256 test_biguint test_arc4_uint64_w_padding test_arc4_uint256_w_padding test_bigint_w_padding test_math_on_unresolved_arc4_uint64 test_storage_on_resolved_arc4_uint64 get_mbr set_arc4_uint64_int_as_global set_arc4_uint256_int_as_global",
      "stack_out": []
    },
    "190": {
      "op": "err"
    },
    "191": {
      "block": "main___algopy_default_create@20",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "193": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "194": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "196": {
      "op": "!",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "197": {
      "op": "&&",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "198": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "return // on error: OnCompletion must be NoOp && can only call when creating",
      "defined_out": [],
      "stack_out": []
    },
    "199": {
      "subroutine": "contract.Test.test_arc4_uint64[routing]",
      "params": {},
      "block": "test_arc4_uint64",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "202": {
      "op": "extract 2 0",
      "defined_out": [
        "bytes_1#0"
      ],
      "stack_out": [
        "bytes_1#0"
      ]
    },
    "205": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "bytes_1#0"
      ],
      "stack_out": [
        "bytes_1#0",
        "0x151f7c75"
      ]
    },
    "206": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "bytes_1#0"
      ]
    },
    "207": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "208": {
      "op": "log",
      "stack_out": []
    },
    "209": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "210": {
      "op": "return",
      "stack_out": []
    },
    "211": {
      "subroutine": "contract.Test.test_arc4_uint256[routing]",
      "params": {},
      "block": "test_arc4_uint256",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "214": {
      "op": "extract 2 0",
      "defined_out": [
        "bytes_1#0"
      ],
      "stack_out": [
        "bytes_1#0"
      ]
    },
    "217": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "bytes_1#0"
      ],
      "stack_out": [
        "bytes_1#0",
        "0x151f7c75"
      ]
    },
    "218": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "bytes_1#0"
      ]
    },
    "219": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "220": {
      "op": "log",
      "stack_out": []
    },
    "221": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "222": {
      "op": "return",
      "stack_out": []
    },
    "223": {
      "subroutine": "contract.Test.test_biguint[routing]",
      "params": {},
      "block": "test_biguint",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "226": {
      "op": "extract 2 0",
      "defined_out": [
        "bytes_1#0"
      ],
      "stack_out": [
        "bytes_1#0"
      ]
    },
    "229": {
      "op": "dup",
      "defined_out": [
        "bytes_1#0",
        "bytes_1#0 (copy)"
      ],
      "stack_out": [
        "bytes_1#0",
        "bytes_1#0 (copy)"
      ]
    },
    "230": {
      "op": "len",
      "defined_out": [
        "aggregate%value_len%0#0",
        "bytes_1#0"
      ],
      "stack_out": [
        "bytes_1#0",
        "aggregate%value_len%0#0"
      ]
    },
    "231": {
      "op": "intc_1 // 64",
      "defined_out": [
        "64",
        "aggregate%value_len%0#0",
        "bytes_1#0"
      ],
      "stack_out": [
        "bytes_1#0",
        "aggregate%value_len%0#0",
        "64"
      ]
    },
    "232": {
      "op": "<=",
      "defined_out": [
        "aggregate%len_ok%0#0",
        "bytes_1#0"
      ],
      "stack_out": [
        "bytes_1#0",
        "aggregate%len_ok%0#0"
      ]
    },
    "233": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "bytes_1#0"
      ]
    },
    "234": {
      "op": "intc_1 // 64",
      "stack_out": [
        "bytes_1#0",
        "64"
      ]
    },
    "235": {
      "op": "bzero",
      "defined_out": [
        "aggregate%bzero%0#0",
        "bytes_1#0"
      ],
      "stack_out": [
        "bytes_1#0",
        "aggregate%bzero%0#0"
      ]
    },
    "236": {
      "op": "b|",
      "defined_out": [
        "aggregate%arc4_encoded%0#0"
      ],
      "stack_out": [
        "aggregate%arc4_encoded%0#0"
      ]
    },
    "237": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%arc4_encoded%0#0"
      ],
      "stack_out": [
        "aggregate%arc4_encoded%0#0",
        "0x151f7c75"
      ]
    },
    "238": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%arc4_encoded%0#0"
      ]
    },
    "239": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "240": {
      "op": "log",
      "stack_out": []
    },
    "241": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "242": {
      "op": "return",
      "stack_out": []
    },
    "243": {
      "subroutine": "contract.Test.test_arc4_uint64_w_padding[routing]",
      "params": {},
      "block": "test_arc4_uint64_w_padding",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "246": {
      "op": "extract 2 0",
      "defined_out": [
        "bytes_1#0"
      ],
      "stack_out": [
        "bytes_1#0"
      ]
    },
    "249": {
      "op": "dup",
      "defined_out": [
        "bytes_1#0",
        "bytes_1#0 (copy)"
      ],
      "stack_out": [
        "bytes_1#0",
        "bytes_1#0 (copy)"
      ]
    },
    "250": {
      "op": "len",
      "defined_out": [
        "bytes_1#0",
        "bytes_length#0"
      ],
      "stack_out": [
        "bytes_1#0",
        "bytes_length#0"
      ]
    },
    "251": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "bytes_1#0",
        "bytes_length#0"
      ],
      "stack_out": [
        "bytes_1#0",
        "bytes_length#0",
        "8"
      ]
    },
    "253": {
      "op": "swap",
      "stack_out": [
        "bytes_1#0",
        "8",
        "bytes_length#0"
      ]
    },
    "254": {
      "op": "-",
      "defined_out": [
        "bytes_1#0",
        "uint64_padding_length_needed#0"
      ],
      "stack_out": [
        "bytes_1#0",
        "uint64_padding_length_needed#0"
      ]
    },
    "255": {
      "op": "bzero",
      "defined_out": [
        "bytes_1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "bytes_1#0",
        "tmp%2#0"
      ]
    },
    "256": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "bytes_1#0"
      ]
    },
    "257": {
      "op": "concat",
      "defined_out": [
        "padded_bytes#0"
      ],
      "stack_out": [
        "padded_bytes#0"
      ]
    },
    "258": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "padded_bytes#0"
      ],
      "stack_out": [
        "padded_bytes#0",
        "0x151f7c75"
      ]
    },
    "259": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "padded_bytes#0"
      ]
    },
    "260": {
      "op": "concat",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "261": {
      "op": "log",
      "stack_out": []
    },
    "262": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "263": {
      "op": "return",
      "stack_out": []
    },
    "264": {
      "subroutine": "contract.Test.test_arc4_uint256_w_padding[routing]",
      "params": {},
      "block": "test_arc4_uint256_w_padding",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "267": {
      "op": "extract 2 0",
      "defined_out": [
        "bytes_1#0"
      ],
      "stack_out": [
        "bytes_1#0"
      ]
    },
    "270": {
      "op": "dup",
      "defined_out": [
        "bytes_1#0",
        "bytes_1#0 (copy)"
      ],
      "stack_out": [
        "bytes_1#0",
        "bytes_1#0 (copy)"
      ]
    },
    "271": {
      "op": "len",
      "defined_out": [
        "bytes_1#0",
        "bytes_length#0"
      ],
      "stack_out": [
        "bytes_1#0",
        "bytes_length#0"
      ]
    },
    "272": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "bytes_1#0",
        "bytes_length#0"
      ],
      "stack_out": [
        "bytes_1#0",
        "bytes_length#0",
        "32"
      ]
    },
    "273": {
      "op": "swap",
      "stack_out": [
        "bytes_1#0",
        "32",
        "bytes_length#0"
      ]
    },
    "274": {
      "op": "-",
      "defined_out": [
        "bytes_1#0",
        "uint256_padding_length_needed#0"
      ],
      "stack_out": [
        "bytes_1#0",
        "uint256_padding_length_needed#0"
      ]
    },
    "275": {
      "op": "bzero",
      "defined_out": [
        "bytes_1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "bytes_1#0",
        "tmp%2#0"
      ]
    },
    "276": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "bytes_1#0"
      ]
    },
    "277": {
      "op": "concat",
      "defined_out": [
        "padded_bytes#0"
      ],
      "stack_out": [
        "padded_bytes#0"
      ]
    },
    "278": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "padded_bytes#0"
      ],
      "stack_out": [
        "padded_bytes#0",
        "0x151f7c75"
      ]
    },
    "279": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "padded_bytes#0"
      ]
    },
    "280": {
      "op": "concat",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "281": {
      "op": "log",
      "stack_out": []
    },
    "282": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "283": {
      "op": "return",
      "stack_out": []
    },
    "284": {
      "subroutine": "contract.Test.test_bigint_w_padding[routing]",
      "params": {},
      "block": "test_bigint_w_padding",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "287": {
      "op": "extract 2 0",
      "defined_out": [
        "bytes_1#0"
      ],
      "stack_out": [
        "bytes_1#0"
      ]
    },
    "290": {
      "op": "dup",
      "defined_out": [
        "bytes_1#0",
        "bytes_1#0 (copy)"
      ],
      "stack_out": [
        "bytes_1#0",
        "bytes_1#0 (copy)"
      ]
    },
    "291": {
      "op": "len",
      "defined_out": [
        "bytes_1#0",
        "bytes_length#0"
      ],
      "stack_out": [
        "bytes_1#0",
        "bytes_length#0"
      ]
    },
    "292": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "bytes_1#0",
        "bytes_length#0"
      ],
      "stack_out": [
        "bytes_1#0",
        "bytes_length#0",
        "32"
      ]
    },
    "293": {
      "op": "swap",
      "stack_out": [
        "bytes_1#0",
        "32",
        "bytes_length#0"
      ]
    },
    "294": {
      "op": "-",
      "defined_out": [
        "bytes_1#0",
        "uint256_padding_length_needed#0"
      ],
      "stack_out": [
        "bytes_1#0",
        "uint256_padding_length_needed#0"
      ]
    },
    "295": {
      "op": "bzero",
      "defined_out": [
        "bytes_1#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "bytes_1#0",
        "tmp%2#1"
      ]
    },
    "296": {
      "op": "swap",
      "stack_out": [
        "tmp%2#1",
        "bytes_1#0"
      ]
    },
    "297": {
      "op": "concat",
      "defined_out": [
        "padded_bytes#0"
      ],
      "stack_out": [
        "padded_bytes#0"
      ]
    },
    "298": {
      "op": "dup",
      "defined_out": [
        "padded_bytes#0",
        "padded_bytes#0 (copy)"
      ],
      "stack_out": [
        "padded_bytes#0",
        "padded_bytes#0 (copy)"
      ]
    },
    "299": {
      "op": "len",
      "defined_out": [
        "aggregate%value_len%0#0",
        "padded_bytes#0"
      ],
      "stack_out": [
        "padded_bytes#0",
        "aggregate%value_len%0#0"
      ]
    },
    "300": {
      "op": "intc_1 // 64",
      "defined_out": [
        "64",
        "aggregate%value_len%0#0",
        "padded_bytes#0"
      ],
      "stack_out": [
        "padded_bytes#0",
        "aggregate%value_len%0#0",
        "64"
      ]
    },
    "301": {
      "op": "<=",
      "defined_out": [
        "aggregate%len_ok%0#0",
        "padded_bytes#0"
      ],
      "stack_out": [
        "padded_bytes#0",
        "aggregate%len_ok%0#0"
      ]
    },
    "302": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "padded_bytes#0"
      ]
    },
    "303": {
      "op": "intc_1 // 64",
      "stack_out": [
        "padded_bytes#0",
        "64"
      ]
    },
    "304": {
      "op": "bzero",
      "defined_out": [
        "aggregate%bzero%0#0",
        "padded_bytes#0"
      ],
      "stack_out": [
        "padded_bytes#0",
        "aggregate%bzero%0#0"
      ]
    },
    "305": {
      "op": "b|",
      "defined_out": [
        "aggregate%arc4_encoded%0#0"
      ],
      "stack_out": [
        "aggregate%arc4_encoded%0#0"
      ]
    },
    "306": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%arc4_encoded%0#0"
      ],
      "stack_out": [
        "aggregate%arc4_encoded%0#0",
        "0x151f7c75"
      ]
    },
    "307": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%arc4_encoded%0#0"
      ]
    },
    "308": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "309": {
      "op": "log",
      "stack_out": []
    },
    "310": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "311": {
      "op": "return",
      "stack_out": []
    },
    "312": {
      "subroutine": "contract.Test.test_math_on_unresolved_arc4_uint64[routing]",
      "params": {},
      "block": "test_math_on_unresolved_arc4_uint64",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "315": {
      "op": "extract 2 0",
      "defined_out": [
        "bytes_1#0"
      ],
      "stack_out": [
        "bytes_1#0"
      ]
    },
    "318": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "319": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "1"
      ]
    },
    "320": {
      "op": "+",
      "defined_out": [
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1"
      ]
    },
    "321": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "322": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "323": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "324": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "325": {
      "op": "log",
      "stack_out": []
    },
    "326": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "327": {
      "op": "return",
      "stack_out": []
    },
    "328": {
      "subroutine": "contract.Test.test_storage_on_resolved_arc4_uint64[routing]",
      "params": {},
      "block": "test_storage_on_resolved_arc4_uint64",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "331": {
      "op": "extract 2 0",
      "defined_out": [
        "bytes_1#0"
      ],
      "stack_out": [
        "bytes_1#0"
      ]
    },
    "334": {
      "op": "txn GroupIndex",
      "defined_out": [
        "bytes_1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bytes_1#0",
        "tmp%1#0"
      ]
    },
    "336": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "bytes_1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bytes_1#0",
        "tmp%1#0",
        "1"
      ]
    },
    "337": {
      "op": "-",
      "defined_out": [
        "bytes_1#0",
        "mbr_payment#0"
      ],
      "stack_out": [
        "bytes_1#0",
        "mbr_payment#0"
      ]
    },
    "338": {
      "op": "dup",
      "defined_out": [
        "bytes_1#0",
        "mbr_payment#0",
        "mbr_payment#0 (copy)"
      ],
      "stack_out": [
        "bytes_1#0",
        "mbr_payment#0",
        "mbr_payment#0 (copy)"
      ]
    },
    "339": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "bytes_1#0",
        "gtxn_type%0#0",
        "mbr_payment#0"
      ],
      "stack_out": [
        "bytes_1#0",
        "mbr_payment#0",
        "gtxn_type%0#0"
      ]
    },
    "341": {
      "op": "intc_0 // pay",
      "defined_out": [
        "bytes_1#0",
        "gtxn_type%0#0",
        "mbr_payment#0",
        "pay"
      ],
      "stack_out": [
        "bytes_1#0",
        "mbr_payment#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "342": {
      "op": "==",
      "defined_out": [
        "bytes_1#0",
        "gtxn_type_matches%0#0",
        "mbr_payment#0"
      ],
      "stack_out": [
        "bytes_1#0",
        "mbr_payment#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "343": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "bytes_1#0",
        "mbr_payment#0"
      ]
    },
    "344": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "bytes_1#0",
        "mbr_payment#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "bytes_1#0",
        "mbr_payment#0",
        "tmp%0#0"
      ]
    },
    "346": {
      "op": "acct_params_get AcctMinBalance",
      "defined_out": [
        "bytes_1#0",
        "check%0#0",
        "mbr_payment#0",
        "pre_mbr#0"
      ],
      "stack_out": [
        "bytes_1#0",
        "mbr_payment#0",
        "pre_mbr#0",
        "check%0#0"
      ]
    },
    "348": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "bytes_1#0",
        "mbr_payment#0",
        "pre_mbr#0"
      ]
    },
    "349": {
      "op": "dig 2",
      "defined_out": [
        "bytes_1#0",
        "bytes_1#0 (copy)",
        "mbr_payment#0",
        "pre_mbr#0"
      ],
      "stack_out": [
        "bytes_1#0",
        "mbr_payment#0",
        "pre_mbr#0",
        "bytes_1#0 (copy)"
      ]
    },
    "351": {
      "op": "box_del",
      "defined_out": [
        "bytes_1#0",
        "mbr_payment#0",
        "pre_mbr#0",
        "{box_del}"
      ],
      "stack_out": [
        "bytes_1#0",
        "mbr_payment#0",
        "pre_mbr#0",
        "{box_del}"
      ]
    },
    "352": {
      "op": "pop",
      "stack_out": [
        "bytes_1#0",
        "mbr_payment#0",
        "pre_mbr#0"
      ]
    },
    "353": {
      "op": "uncover 2",
      "stack_out": [
        "mbr_payment#0",
        "pre_mbr#0",
        "bytes_1#0"
      ]
    },
    "355": {
      "op": "pushbytes \"\"",
      "defined_out": [
        "\"\"",
        "bytes_1#0",
        "mbr_payment#0",
        "pre_mbr#0"
      ],
      "stack_out": [
        "mbr_payment#0",
        "pre_mbr#0",
        "bytes_1#0",
        "\"\""
      ]
    },
    "357": {
      "op": "box_put",
      "stack_out": [
        "mbr_payment#0",
        "pre_mbr#0"
      ]
    },
    "358": {
      "op": "global CurrentApplicationAddress",
      "stack_out": [
        "mbr_payment#0",
        "pre_mbr#0",
        "tmp%0#0"
      ]
    },
    "360": {
      "op": "acct_params_get AcctMinBalance",
      "defined_out": [
        "check%0#0",
        "mbr_payment#0",
        "post_mbr#0",
        "pre_mbr#0"
      ],
      "stack_out": [
        "mbr_payment#0",
        "pre_mbr#0",
        "post_mbr#0",
        "check%0#0"
      ]
    },
    "362": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "mbr_payment#0",
        "pre_mbr#0",
        "post_mbr#0"
      ]
    },
    "363": {
      "op": "itxn_begin"
    },
    "364": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "mbr_payment#0",
        "post_mbr#0",
        "pre_mbr#0"
      ],
      "stack_out": [
        "mbr_payment#0",
        "pre_mbr#0",
        "post_mbr#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ]
    },
    "366": {
      "op": "uncover 3",
      "stack_out": [
        "pre_mbr#0",
        "post_mbr#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "mbr_payment#0"
      ]
    },
    "368": {
      "op": "gtxns Amount",
      "defined_out": [
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "post_mbr#0",
        "pre_mbr#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "pre_mbr#0",
        "post_mbr#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "tmp%2#0"
      ]
    },
    "370": {
      "op": "uncover 2",
      "stack_out": [
        "pre_mbr#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "tmp%2#0",
        "post_mbr#0"
      ]
    },
    "372": {
      "op": "uncover 3",
      "stack_out": [
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "tmp%2#0",
        "post_mbr#0",
        "pre_mbr#0"
      ]
    },
    "374": {
      "op": "-",
      "defined_out": [
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "375": {
      "op": "-",
      "defined_out": [
        "inner_txn_params%0%%param_Amount_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "inner_txn_params%0%%param_Amount_idx_0#0"
      ]
    },
    "376": {
      "op": "itxn_field Amount",
      "stack_out": [
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ]
    },
    "378": {
      "op": "itxn_field Receiver",
      "stack_out": []
    },
    "380": {
      "op": "intc_0 // pay",
      "stack_out": [
        "pay"
      ]
    },
    "381": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "383": {
      "op": "pushint 0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "385": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "387": {
      "op": "itxn_submit"
    },
    "388": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "389": {
      "op": "return",
      "stack_out": []
    },
    "390": {
      "subroutine": "contract.Test.get_mbr[routing]",
      "params": {},
      "block": "get_mbr",
      "stack_in": [],
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "392": {
      "op": "acct_params_get AcctMinBalance",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "394": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "value%0#0"
      ]
    },
    "395": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "396": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "397": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "398": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "399": {
      "op": "log",
      "stack_out": []
    },
    "400": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "401": {
      "op": "return",
      "stack_out": []
    },
    "402": {
      "subroutine": "contract.Test.set_arc4_uint64_int_as_global[routing]",
      "params": {},
      "block": "set_arc4_uint64_int_as_global",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "405": {
      "op": "extract 2 0",
      "defined_out": [
        "bytes_1#0"
      ],
      "stack_out": [
        "bytes_1#0"
      ]
    },
    "408": {
      "op": "bytec_1 // \"test_global_1\"",
      "defined_out": [
        "\"test_global_1\"",
        "bytes_1#0"
      ],
      "stack_out": [
        "bytes_1#0",
        "\"test_global_1\""
      ]
    },
    "409": {
      "op": "swap",
      "stack_out": [
        "\"test_global_1\"",
        "bytes_1#0"
      ]
    },
    "410": {
      "op": "app_global_put",
      "stack_out": []
    },
    "411": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "412": {
      "op": "return",
      "stack_out": []
    },
    "413": {
      "subroutine": "contract.Test.set_arc4_uint256_int_as_global[routing]",
      "params": {},
      "block": "set_arc4_uint256_int_as_global",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "416": {
      "op": "extract 2 0",
      "defined_out": [
        "bytes_1#0"
      ],
      "stack_out": [
        "bytes_1#0"
      ]
    },
    "419": {
      "op": "bytec_2 // \"test_global_2\"",
      "defined_out": [
        "\"test_global_2\"",
        "bytes_1#0"
      ],
      "stack_out": [
        "bytes_1#0",
        "\"test_global_2\""
      ]
    },
    "420": {
      "op": "swap",
      "stack_out": [
        "\"test_global_2\"",
        "bytes_1#0"
      ]
    },
    "421": {
      "op": "app_global_put",
      "stack_out": []
    },
    "422": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "423": {
      "op": "return",
      "stack_out": []
    }
  }
}