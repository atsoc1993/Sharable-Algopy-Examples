{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;AAIA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;AAKK;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;AAAA;;;AAEkB;AAAA;AACgB;;AAAA;AAAA;AAChB;AAAA;AAAA;AAJlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;;;AAAA;;;AAEkB;AAAA;AACiB;AAAA;AAAA;AACjB;AAAA;AAAA;AAJlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;;;AAAA;;;AAEkB;AAAA;AACiB;AAAA;AAAA;AACjB;AAAA;AAAA;AAJlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;;;AAAA;;;AAEU;AAA8C;AAA9C;AAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAYU;;AAAA;;AAAA;AATP;;AAAA;;AAAA;;AAAqD;;AAArD;AASO;;AAAA;;AAAA;AAPP;AACa;;AACF;;AAAA;;AAAsB;;AAAA;;AAAA;AAAtB;;;;;AAFX;;;AAAA;;;;AAAA;AALH;AAAA;AAYU;;AAAA;;AAAA;AAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 64 32"
    },
    "6": {
      "op": "bytecblock 0x151f7c75"
    },
    "13": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "15": {
      "op": "bz main___algopy_default_create@18",
      "stack_out": []
    },
    "18": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "20": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "21": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "22": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "24": {
      "op": "assert",
      "stack_out": []
    },
    "25": {
      "op": "pushbytess 0xb83722d9 0x183e0f6d 0x6463ab84 0xf89eaf82 0x5838b2be 0xdcf95838 0x8359088c 0x48ed7393 0xa812ecf2 // method \"test_arc4_uint64(byte[])uint64\", method \"test_arc4_uint256(byte[])uint256\", method \"test_biguint(byte[])uint512\", method \"test_arc4_uint64_w_padding(byte[])uint64\", method \"test_arc4_uint256_w_padding(byte[])uint256\", method \"test_bigint_w_padding(byte[])uint512\", method \"test_math_on_unresolved_arc4_uint64(byte[])uint64\", method \"test_storage_on_resolved_arc4_uint64(byte[],pay)void\", method \"get_mbr()uint64\"",
      "defined_out": [
        "Method(get_mbr()uint64)",
        "Method(test_arc4_uint256(byte[])uint256)",
        "Method(test_arc4_uint256_w_padding(byte[])uint256)",
        "Method(test_arc4_uint64(byte[])uint64)",
        "Method(test_arc4_uint64_w_padding(byte[])uint64)",
        "Method(test_bigint_w_padding(byte[])uint512)",
        "Method(test_biguint(byte[])uint512)",
        "Method(test_math_on_unresolved_arc4_uint64(byte[])uint64)",
        "Method(test_storage_on_resolved_arc4_uint64(byte[],pay)void)"
      ],
      "stack_out": [
        "Method(test_arc4_uint64(byte[])uint64)",
        "Method(test_arc4_uint256(byte[])uint256)",
        "Method(test_biguint(byte[])uint512)",
        "Method(test_arc4_uint64_w_padding(byte[])uint64)",
        "Method(test_arc4_uint256_w_padding(byte[])uint256)",
        "Method(test_bigint_w_padding(byte[])uint512)",
        "Method(test_math_on_unresolved_arc4_uint64(byte[])uint64)",
        "Method(test_storage_on_resolved_arc4_uint64(byte[],pay)void)",
        "Method(get_mbr()uint64)"
      ]
    },
    "72": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(get_mbr()uint64)",
        "Method(test_arc4_uint256(byte[])uint256)",
        "Method(test_arc4_uint256_w_padding(byte[])uint256)",
        "Method(test_arc4_uint64(byte[])uint64)",
        "Method(test_arc4_uint64_w_padding(byte[])uint64)",
        "Method(test_bigint_w_padding(byte[])uint512)",
        "Method(test_biguint(byte[])uint512)",
        "Method(test_math_on_unresolved_arc4_uint64(byte[])uint64)",
        "Method(test_storage_on_resolved_arc4_uint64(byte[],pay)void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "Method(test_arc4_uint64(byte[])uint64)",
        "Method(test_arc4_uint256(byte[])uint256)",
        "Method(test_biguint(byte[])uint512)",
        "Method(test_arc4_uint64_w_padding(byte[])uint64)",
        "Method(test_arc4_uint256_w_padding(byte[])uint256)",
        "Method(test_bigint_w_padding(byte[])uint512)",
        "Method(test_math_on_unresolved_arc4_uint64(byte[])uint64)",
        "Method(test_storage_on_resolved_arc4_uint64(byte[],pay)void)",
        "Method(get_mbr()uint64)",
        "tmp%6#0"
      ]
    },
    "75": {
      "op": "match test_arc4_uint64 test_arc4_uint256 test_biguint test_arc4_uint64_w_padding test_arc4_uint256_w_padding test_bigint_w_padding test_math_on_unresolved_arc4_uint64 test_storage_on_resolved_arc4_uint64 get_mbr",
      "stack_out": []
    },
    "95": {
      "op": "err"
    },
    "96": {
      "block": "main___algopy_default_create@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "98": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "99": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "101": {
      "op": "!",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "102": {
      "op": "&&",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "103": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "return // on error: OnCompletion must be NoOp && can only call when creating",
      "defined_out": [],
      "stack_out": []
    },
    "104": {
      "subroutine": "contract.Test.test_arc4_uint64[routing]",
      "params": {},
      "block": "test_arc4_uint64",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "107": {
      "op": "extract 2 0",
      "defined_out": [
        "bytes_1#0"
      ],
      "stack_out": [
        "bytes_1#0"
      ]
    },
    "110": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "bytes_1#0"
      ],
      "stack_out": [
        "bytes_1#0",
        "0x151f7c75"
      ]
    },
    "111": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "bytes_1#0"
      ]
    },
    "112": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "113": {
      "op": "log",
      "stack_out": []
    },
    "114": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "115": {
      "op": "return",
      "stack_out": []
    },
    "116": {
      "subroutine": "contract.Test.test_arc4_uint256[routing]",
      "params": {},
      "block": "test_arc4_uint256",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "119": {
      "op": "extract 2 0",
      "defined_out": [
        "bytes_1#0"
      ],
      "stack_out": [
        "bytes_1#0"
      ]
    },
    "122": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "bytes_1#0"
      ],
      "stack_out": [
        "bytes_1#0",
        "0x151f7c75"
      ]
    },
    "123": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "bytes_1#0"
      ]
    },
    "124": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "125": {
      "op": "log",
      "stack_out": []
    },
    "126": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "127": {
      "op": "return",
      "stack_out": []
    },
    "128": {
      "subroutine": "contract.Test.test_biguint[routing]",
      "params": {},
      "block": "test_biguint",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "131": {
      "op": "extract 2 0",
      "defined_out": [
        "bytes_1#0"
      ],
      "stack_out": [
        "bytes_1#0"
      ]
    },
    "134": {
      "op": "dup",
      "defined_out": [
        "bytes_1#0",
        "bytes_1#0 (copy)"
      ],
      "stack_out": [
        "bytes_1#0",
        "bytes_1#0 (copy)"
      ]
    },
    "135": {
      "op": "len",
      "defined_out": [
        "aggregate%value_len%0#0",
        "bytes_1#0"
      ],
      "stack_out": [
        "bytes_1#0",
        "aggregate%value_len%0#0"
      ]
    },
    "136": {
      "op": "intc_1 // 64",
      "defined_out": [
        "64",
        "aggregate%value_len%0#0",
        "bytes_1#0"
      ],
      "stack_out": [
        "bytes_1#0",
        "aggregate%value_len%0#0",
        "64"
      ]
    },
    "137": {
      "op": "<=",
      "defined_out": [
        "aggregate%len_ok%0#0",
        "bytes_1#0"
      ],
      "stack_out": [
        "bytes_1#0",
        "aggregate%len_ok%0#0"
      ]
    },
    "138": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "bytes_1#0"
      ]
    },
    "139": {
      "op": "intc_1 // 64",
      "stack_out": [
        "bytes_1#0",
        "64"
      ]
    },
    "140": {
      "op": "bzero",
      "defined_out": [
        "aggregate%bzero%0#0",
        "bytes_1#0"
      ],
      "stack_out": [
        "bytes_1#0",
        "aggregate%bzero%0#0"
      ]
    },
    "141": {
      "op": "b|",
      "defined_out": [
        "aggregate%arc4_encoded%0#0"
      ],
      "stack_out": [
        "aggregate%arc4_encoded%0#0"
      ]
    },
    "142": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%arc4_encoded%0#0"
      ],
      "stack_out": [
        "aggregate%arc4_encoded%0#0",
        "0x151f7c75"
      ]
    },
    "143": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%arc4_encoded%0#0"
      ]
    },
    "144": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "145": {
      "op": "log",
      "stack_out": []
    },
    "146": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "147": {
      "op": "return",
      "stack_out": []
    },
    "148": {
      "subroutine": "contract.Test.test_arc4_uint64_w_padding[routing]",
      "params": {},
      "block": "test_arc4_uint64_w_padding",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "151": {
      "op": "extract 2 0",
      "defined_out": [
        "bytes_1#0"
      ],
      "stack_out": [
        "bytes_1#0"
      ]
    },
    "154": {
      "op": "dup",
      "defined_out": [
        "bytes_1#0",
        "bytes_1#0 (copy)"
      ],
      "stack_out": [
        "bytes_1#0",
        "bytes_1#0 (copy)"
      ]
    },
    "155": {
      "op": "len",
      "defined_out": [
        "bytes_1#0",
        "bytes_length#0"
      ],
      "stack_out": [
        "bytes_1#0",
        "bytes_length#0"
      ]
    },
    "156": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "bytes_1#0",
        "bytes_length#0"
      ],
      "stack_out": [
        "bytes_1#0",
        "bytes_length#0",
        "8"
      ]
    },
    "158": {
      "op": "swap",
      "stack_out": [
        "bytes_1#0",
        "8",
        "bytes_length#0"
      ]
    },
    "159": {
      "op": "-",
      "defined_out": [
        "bytes_1#0",
        "uint64_padding_length_needed#0"
      ],
      "stack_out": [
        "bytes_1#0",
        "uint64_padding_length_needed#0"
      ]
    },
    "160": {
      "op": "bzero",
      "defined_out": [
        "bytes_1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "bytes_1#0",
        "tmp%2#0"
      ]
    },
    "161": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "bytes_1#0"
      ]
    },
    "162": {
      "op": "concat",
      "defined_out": [
        "padded_bytes#0"
      ],
      "stack_out": [
        "padded_bytes#0"
      ]
    },
    "163": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "padded_bytes#0"
      ],
      "stack_out": [
        "padded_bytes#0",
        "0x151f7c75"
      ]
    },
    "164": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "padded_bytes#0"
      ]
    },
    "165": {
      "op": "concat",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "166": {
      "op": "log",
      "stack_out": []
    },
    "167": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "168": {
      "op": "return",
      "stack_out": []
    },
    "169": {
      "subroutine": "contract.Test.test_arc4_uint256_w_padding[routing]",
      "params": {},
      "block": "test_arc4_uint256_w_padding",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "172": {
      "op": "extract 2 0",
      "defined_out": [
        "bytes_1#0"
      ],
      "stack_out": [
        "bytes_1#0"
      ]
    },
    "175": {
      "op": "dup",
      "defined_out": [
        "bytes_1#0",
        "bytes_1#0 (copy)"
      ],
      "stack_out": [
        "bytes_1#0",
        "bytes_1#0 (copy)"
      ]
    },
    "176": {
      "op": "len",
      "defined_out": [
        "bytes_1#0",
        "bytes_length#0"
      ],
      "stack_out": [
        "bytes_1#0",
        "bytes_length#0"
      ]
    },
    "177": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "bytes_1#0",
        "bytes_length#0"
      ],
      "stack_out": [
        "bytes_1#0",
        "bytes_length#0",
        "32"
      ]
    },
    "178": {
      "op": "swap",
      "stack_out": [
        "bytes_1#0",
        "32",
        "bytes_length#0"
      ]
    },
    "179": {
      "op": "-",
      "defined_out": [
        "bytes_1#0",
        "uint256_padding_length_needed#0"
      ],
      "stack_out": [
        "bytes_1#0",
        "uint256_padding_length_needed#0"
      ]
    },
    "180": {
      "op": "bzero",
      "defined_out": [
        "bytes_1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "bytes_1#0",
        "tmp%2#0"
      ]
    },
    "181": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "bytes_1#0"
      ]
    },
    "182": {
      "op": "concat",
      "defined_out": [
        "padded_bytes#0"
      ],
      "stack_out": [
        "padded_bytes#0"
      ]
    },
    "183": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "padded_bytes#0"
      ],
      "stack_out": [
        "padded_bytes#0",
        "0x151f7c75"
      ]
    },
    "184": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "padded_bytes#0"
      ]
    },
    "185": {
      "op": "concat",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "186": {
      "op": "log",
      "stack_out": []
    },
    "187": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "188": {
      "op": "return",
      "stack_out": []
    },
    "189": {
      "subroutine": "contract.Test.test_bigint_w_padding[routing]",
      "params": {},
      "block": "test_bigint_w_padding",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "192": {
      "op": "extract 2 0",
      "defined_out": [
        "bytes_1#0"
      ],
      "stack_out": [
        "bytes_1#0"
      ]
    },
    "195": {
      "op": "dup",
      "defined_out": [
        "bytes_1#0",
        "bytes_1#0 (copy)"
      ],
      "stack_out": [
        "bytes_1#0",
        "bytes_1#0 (copy)"
      ]
    },
    "196": {
      "op": "len",
      "defined_out": [
        "bytes_1#0",
        "bytes_length#0"
      ],
      "stack_out": [
        "bytes_1#0",
        "bytes_length#0"
      ]
    },
    "197": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "bytes_1#0",
        "bytes_length#0"
      ],
      "stack_out": [
        "bytes_1#0",
        "bytes_length#0",
        "32"
      ]
    },
    "198": {
      "op": "swap",
      "stack_out": [
        "bytes_1#0",
        "32",
        "bytes_length#0"
      ]
    },
    "199": {
      "op": "-",
      "defined_out": [
        "bytes_1#0",
        "uint256_padding_length_needed#0"
      ],
      "stack_out": [
        "bytes_1#0",
        "uint256_padding_length_needed#0"
      ]
    },
    "200": {
      "op": "bzero",
      "defined_out": [
        "bytes_1#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "bytes_1#0",
        "tmp%2#1"
      ]
    },
    "201": {
      "op": "swap",
      "stack_out": [
        "tmp%2#1",
        "bytes_1#0"
      ]
    },
    "202": {
      "op": "concat",
      "defined_out": [
        "padded_bytes#0"
      ],
      "stack_out": [
        "padded_bytes#0"
      ]
    },
    "203": {
      "op": "dup",
      "defined_out": [
        "padded_bytes#0",
        "padded_bytes#0 (copy)"
      ],
      "stack_out": [
        "padded_bytes#0",
        "padded_bytes#0 (copy)"
      ]
    },
    "204": {
      "op": "len",
      "defined_out": [
        "aggregate%value_len%0#0",
        "padded_bytes#0"
      ],
      "stack_out": [
        "padded_bytes#0",
        "aggregate%value_len%0#0"
      ]
    },
    "205": {
      "op": "intc_1 // 64",
      "defined_out": [
        "64",
        "aggregate%value_len%0#0",
        "padded_bytes#0"
      ],
      "stack_out": [
        "padded_bytes#0",
        "aggregate%value_len%0#0",
        "64"
      ]
    },
    "206": {
      "op": "<=",
      "defined_out": [
        "aggregate%len_ok%0#0",
        "padded_bytes#0"
      ],
      "stack_out": [
        "padded_bytes#0",
        "aggregate%len_ok%0#0"
      ]
    },
    "207": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "padded_bytes#0"
      ]
    },
    "208": {
      "op": "intc_1 // 64",
      "stack_out": [
        "padded_bytes#0",
        "64"
      ]
    },
    "209": {
      "op": "bzero",
      "defined_out": [
        "aggregate%bzero%0#0",
        "padded_bytes#0"
      ],
      "stack_out": [
        "padded_bytes#0",
        "aggregate%bzero%0#0"
      ]
    },
    "210": {
      "op": "b|",
      "defined_out": [
        "aggregate%arc4_encoded%0#0"
      ],
      "stack_out": [
        "aggregate%arc4_encoded%0#0"
      ]
    },
    "211": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%arc4_encoded%0#0"
      ],
      "stack_out": [
        "aggregate%arc4_encoded%0#0",
        "0x151f7c75"
      ]
    },
    "212": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%arc4_encoded%0#0"
      ]
    },
    "213": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "214": {
      "op": "log",
      "stack_out": []
    },
    "215": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "216": {
      "op": "return",
      "stack_out": []
    },
    "217": {
      "subroutine": "contract.Test.test_math_on_unresolved_arc4_uint64[routing]",
      "params": {},
      "block": "test_math_on_unresolved_arc4_uint64",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "220": {
      "op": "extract 2 0",
      "defined_out": [
        "bytes_1#0"
      ],
      "stack_out": [
        "bytes_1#0"
      ]
    },
    "223": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "224": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "1"
      ]
    },
    "225": {
      "op": "+",
      "defined_out": [
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1"
      ]
    },
    "226": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "227": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "228": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "229": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "230": {
      "op": "log",
      "stack_out": []
    },
    "231": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "232": {
      "op": "return",
      "stack_out": []
    },
    "233": {
      "subroutine": "contract.Test.test_storage_on_resolved_arc4_uint64[routing]",
      "params": {},
      "block": "test_storage_on_resolved_arc4_uint64",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "236": {
      "op": "extract 2 0",
      "defined_out": [
        "bytes_1#0"
      ],
      "stack_out": [
        "bytes_1#0"
      ]
    },
    "239": {
      "op": "txn GroupIndex",
      "defined_out": [
        "bytes_1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bytes_1#0",
        "tmp%1#0"
      ]
    },
    "241": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "bytes_1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bytes_1#0",
        "tmp%1#0",
        "1"
      ]
    },
    "242": {
      "op": "-",
      "defined_out": [
        "bytes_1#0",
        "mbr_payment#0"
      ],
      "stack_out": [
        "bytes_1#0",
        "mbr_payment#0"
      ]
    },
    "243": {
      "op": "dup",
      "defined_out": [
        "bytes_1#0",
        "mbr_payment#0",
        "mbr_payment#0 (copy)"
      ],
      "stack_out": [
        "bytes_1#0",
        "mbr_payment#0",
        "mbr_payment#0 (copy)"
      ]
    },
    "244": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "bytes_1#0",
        "gtxn_type%0#0",
        "mbr_payment#0"
      ],
      "stack_out": [
        "bytes_1#0",
        "mbr_payment#0",
        "gtxn_type%0#0"
      ]
    },
    "246": {
      "op": "intc_0 // pay",
      "defined_out": [
        "bytes_1#0",
        "gtxn_type%0#0",
        "mbr_payment#0",
        "pay"
      ],
      "stack_out": [
        "bytes_1#0",
        "mbr_payment#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "247": {
      "op": "==",
      "defined_out": [
        "bytes_1#0",
        "gtxn_type_matches%0#0",
        "mbr_payment#0"
      ],
      "stack_out": [
        "bytes_1#0",
        "mbr_payment#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "248": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "bytes_1#0",
        "mbr_payment#0"
      ]
    },
    "249": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "bytes_1#0",
        "mbr_payment#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "bytes_1#0",
        "mbr_payment#0",
        "tmp%0#0"
      ]
    },
    "251": {
      "op": "acct_params_get AcctMinBalance",
      "defined_out": [
        "bytes_1#0",
        "check%0#0",
        "mbr_payment#0",
        "pre_mbr#0"
      ],
      "stack_out": [
        "bytes_1#0",
        "mbr_payment#0",
        "pre_mbr#0",
        "check%0#0"
      ]
    },
    "253": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "bytes_1#0",
        "mbr_payment#0",
        "pre_mbr#0"
      ]
    },
    "254": {
      "op": "dig 2",
      "defined_out": [
        "bytes_1#0",
        "bytes_1#0 (copy)",
        "mbr_payment#0",
        "pre_mbr#0"
      ],
      "stack_out": [
        "bytes_1#0",
        "mbr_payment#0",
        "pre_mbr#0",
        "bytes_1#0 (copy)"
      ]
    },
    "256": {
      "op": "box_del",
      "defined_out": [
        "bytes_1#0",
        "mbr_payment#0",
        "pre_mbr#0",
        "{box_del}"
      ],
      "stack_out": [
        "bytes_1#0",
        "mbr_payment#0",
        "pre_mbr#0",
        "{box_del}"
      ]
    },
    "257": {
      "op": "pop",
      "stack_out": [
        "bytes_1#0",
        "mbr_payment#0",
        "pre_mbr#0"
      ]
    },
    "258": {
      "op": "uncover 2",
      "stack_out": [
        "mbr_payment#0",
        "pre_mbr#0",
        "bytes_1#0"
      ]
    },
    "260": {
      "op": "pushbytes \"\"",
      "defined_out": [
        "\"\"",
        "bytes_1#0",
        "mbr_payment#0",
        "pre_mbr#0"
      ],
      "stack_out": [
        "mbr_payment#0",
        "pre_mbr#0",
        "bytes_1#0",
        "\"\""
      ]
    },
    "262": {
      "op": "box_put",
      "stack_out": [
        "mbr_payment#0",
        "pre_mbr#0"
      ]
    },
    "263": {
      "op": "global CurrentApplicationAddress",
      "stack_out": [
        "mbr_payment#0",
        "pre_mbr#0",
        "tmp%0#0"
      ]
    },
    "265": {
      "op": "acct_params_get AcctMinBalance",
      "defined_out": [
        "check%0#0",
        "mbr_payment#0",
        "post_mbr#0",
        "pre_mbr#0"
      ],
      "stack_out": [
        "mbr_payment#0",
        "pre_mbr#0",
        "post_mbr#0",
        "check%0#0"
      ]
    },
    "267": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "mbr_payment#0",
        "pre_mbr#0",
        "post_mbr#0"
      ]
    },
    "268": {
      "op": "itxn_begin"
    },
    "269": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "mbr_payment#0",
        "post_mbr#0",
        "pre_mbr#0"
      ],
      "stack_out": [
        "mbr_payment#0",
        "pre_mbr#0",
        "post_mbr#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ]
    },
    "271": {
      "op": "uncover 3",
      "stack_out": [
        "pre_mbr#0",
        "post_mbr#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "mbr_payment#0"
      ]
    },
    "273": {
      "op": "gtxns Amount",
      "defined_out": [
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "post_mbr#0",
        "pre_mbr#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "pre_mbr#0",
        "post_mbr#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "tmp%2#0"
      ]
    },
    "275": {
      "op": "uncover 2",
      "stack_out": [
        "pre_mbr#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "tmp%2#0",
        "post_mbr#0"
      ]
    },
    "277": {
      "op": "uncover 3",
      "stack_out": [
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "tmp%2#0",
        "post_mbr#0",
        "pre_mbr#0"
      ]
    },
    "279": {
      "op": "-",
      "defined_out": [
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "280": {
      "op": "-",
      "defined_out": [
        "inner_txn_params%0%%param_Amount_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "inner_txn_params%0%%param_Amount_idx_0#0"
      ]
    },
    "281": {
      "op": "itxn_field Amount",
      "stack_out": [
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ]
    },
    "283": {
      "op": "itxn_field Receiver",
      "stack_out": []
    },
    "285": {
      "op": "intc_0 // pay",
      "stack_out": [
        "pay"
      ]
    },
    "286": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "288": {
      "op": "pushint 0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "290": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "292": {
      "op": "itxn_submit"
    },
    "293": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "294": {
      "op": "return",
      "stack_out": []
    },
    "295": {
      "subroutine": "contract.Test.get_mbr[routing]",
      "params": {},
      "block": "get_mbr",
      "stack_in": [],
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "297": {
      "op": "acct_params_get AcctMinBalance",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "299": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "value%0#0"
      ]
    },
    "300": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "301": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "302": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "303": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "304": {
      "op": "log",
      "stack_out": []
    },
    "305": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "306": {
      "op": "return",
      "stack_out": []
    }
  }
}