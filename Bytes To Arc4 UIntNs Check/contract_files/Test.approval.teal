#pragma version 11
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 1 64 32
    bytecblock 0x151f7c75
    // contract.py:5
    // class Test(ARC4Contract):
    txn NumAppArgs
    bz main___algopy_default_create@18
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    pushbytess 0xb83722d9 0x183e0f6d 0x6463ab84 0xf89eaf82 0x5838b2be 0xdcf95838 0x8359088c 0x48ed7393 0xa812ecf2 // method "test_arc4_uint64(byte[])uint64", method "test_arc4_uint256(byte[])uint256", method "test_biguint(byte[])uint512", method "test_arc4_uint64_w_padding(byte[])uint64", method "test_arc4_uint256_w_padding(byte[])uint256", method "test_bigint_w_padding(byte[])uint512", method "test_math_on_unresolved_arc4_uint64(byte[])uint64", method "test_storage_on_resolved_arc4_uint64(byte[],pay)void", method "get_mbr()uint64"
    txna ApplicationArgs 0
    match test_arc4_uint64 test_arc4_uint256 test_biguint test_arc4_uint64_w_padding test_arc4_uint256_w_padding test_bigint_w_padding test_math_on_unresolved_arc4_uint64 test_storage_on_resolved_arc4_uint64 get_mbr
    err

main___algopy_default_create@18:
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    return // on error: OnCompletion must be NoOp && can only call when creating


// contract.Test.test_arc4_uint64[routing]() -> void:
test_arc4_uint64:
    // contract.py:10
    // @abimethod
    txna ApplicationArgs 1
    extract 2 0
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// contract.Test.test_arc4_uint256[routing]() -> void:
test_arc4_uint256:
    // contract.py:14
    // @abimethod
    txna ApplicationArgs 1
    extract 2 0
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// contract.Test.test_biguint[routing]() -> void:
test_biguint:
    // contract.py:18
    // @abimethod
    txna ApplicationArgs 1
    extract 2 0
    dup
    len
    intc_1 // 64
    <=
    assert // overflow
    intc_1 // 64
    bzero
    b|
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// contract.Test.test_arc4_uint64_w_padding[routing]() -> void:
test_arc4_uint64_w_padding:
    // contract.py:22
    // @abimethod
    txna ApplicationArgs 1
    extract 2 0
    // contract.py:24
    // bytes_length = bytes_1.length
    dup
    len
    // contract.py:25
    // uint64_padding_length_needed = UInt64(8) - bytes_length
    pushint 8 // 8
    swap
    -
    // contract.py:26
    // padded_bytes = op.bzero(uint64_padding_length_needed) + bytes_1
    bzero
    swap
    concat
    // contract.py:22
    // @abimethod
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// contract.Test.test_arc4_uint256_w_padding[routing]() -> void:
test_arc4_uint256_w_padding:
    // contract.py:29
    // @abimethod
    txna ApplicationArgs 1
    extract 2 0
    // contract.py:31
    // bytes_length = bytes_1.length
    dup
    len
    // contract.py:32
    // uint256_padding_length_needed = UInt64(32) - bytes_length
    intc_2 // 32
    swap
    -
    // contract.py:33
    // padded_bytes = op.bzero(uint256_padding_length_needed) + bytes_1
    bzero
    swap
    concat
    // contract.py:29
    // @abimethod
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// contract.Test.test_bigint_w_padding[routing]() -> void:
test_bigint_w_padding:
    // contract.py:36
    // @abimethod
    txna ApplicationArgs 1
    extract 2 0
    // contract.py:38
    // bytes_length = bytes_1.length
    dup
    len
    // contract.py:39
    // uint256_padding_length_needed = UInt64(32) - bytes_length
    intc_2 // 32
    swap
    -
    // contract.py:40
    // padded_bytes = op.bzero(uint256_padding_length_needed) + bytes_1
    bzero
    swap
    concat
    // contract.py:36
    // @abimethod
    dup
    len
    intc_1 // 64
    <=
    assert // overflow
    intc_1 // 64
    bzero
    b|
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// contract.Test.test_math_on_unresolved_arc4_uint64[routing]() -> void:
test_math_on_unresolved_arc4_uint64:
    // contract.py:43
    // @abimethod
    txna ApplicationArgs 1
    extract 2 0
    // contract.py:45
    // return arc4.UInt64.from_bytes(bytes_1).as_uint64() + UInt64(1)
    btoi
    intc_0 // 1
    +
    // contract.py:43
    // @abimethod
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// contract.Test.test_storage_on_resolved_arc4_uint64[routing]() -> void:
test_storage_on_resolved_arc4_uint64:
    // contract.py:47
    // @abimethod
    txna ApplicationArgs 1
    extract 2 0
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    // contract.py:59
    // return Global.current_application_address.min_balance
    global CurrentApplicationAddress
    acct_params_get AcctMinBalance
    assert // account funded
    // contract.py:50
    // self.test_storage[arc4.UInt64.from_bytes(bytes_1)] = String('')
    dig 2
    box_del
    pop
    uncover 2
    pushbytes ""
    box_put
    // contract.py:59
    // return Global.current_application_address.min_balance
    global CurrentApplicationAddress
    acct_params_get AcctMinBalance
    assert // account funded
    // contract.py:52-55
    // itxn.Payment(
    //     receiver=Txn.sender,
    //     amount=mbr_payment.amount - (post_mbr - pre_mbr)
    // ).submit()
    itxn_begin
    // contract.py:53
    // receiver=Txn.sender,
    txn Sender
    // contract.py:54
    // amount=mbr_payment.amount - (post_mbr - pre_mbr)
    uncover 3
    gtxns Amount
    uncover 2
    uncover 3
    -
    -
    itxn_field Amount
    itxn_field Receiver
    // contract.py:52
    // itxn.Payment(
    intc_0 // pay
    itxn_field TypeEnum
    pushint 0 // 0
    itxn_field Fee
    // contract.py:52-55
    // itxn.Payment(
    //     receiver=Txn.sender,
    //     amount=mbr_payment.amount - (post_mbr - pre_mbr)
    // ).submit()
    itxn_submit
    // contract.py:47
    // @abimethod
    intc_0 // 1
    return


// contract.Test.get_mbr[routing]() -> void:
get_mbr:
    // contract.py:59
    // return Global.current_application_address.min_balance
    global CurrentApplicationAddress
    acct_params_get AcctMinBalance
    assert // account funded
    // contract.py:57
    // @abimethod
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return
