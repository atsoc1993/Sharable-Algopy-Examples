{
    "name": "Test",
    "structs": {
        "SomeStruct": [
            {
                "name": "uint64_1",
                "type": "uint64"
            },
            {
                "name": "uint256_1",
                "type": "uint256"
            },
            {
                "name": "unknown_length_byte_array",
                "type": "byte[]"
            },
            {
                "name": "unknown_length_uint64_array",
                "type": "uint64[]"
            },
            {
                "name": "uint64_2",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "write_box",
            "args": [
                {
                    "type": "uint64",
                    "name": "uint64_1"
                },
                {
                    "type": "uint256",
                    "name": "uint256_1"
                },
                {
                    "type": "byte[]",
                    "name": "unknown_length_byte_array"
                },
                {
                    "type": "uint64[]",
                    "name": "unknown_length_uint64_array"
                },
                {
                    "type": "uint64",
                    "name": "uint64_2"
                },
                {
                    "type": "pay",
                    "name": "mbr_payment"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_item_by_index_in_uint64_array",
            "args": [
                {
                    "type": "uint64",
                    "name": "index"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "find_item_index_in_uint64_array",
            "args": [
                {
                    "type": "uint64",
                    "name": "target_uint64"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "adjust_item_at_index",
            "args": [
                {
                    "type": "uint64",
                    "name": "index"
                },
                {
                    "type": "uint64",
                    "name": "new_num"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "dynamic_array_of_structs_write_box",
            "args": [
                {
                    "type": "(uint64,uint256,byte[],uint64[],uint64)[]",
                    "name": "dynamic_structs"
                },
                {
                    "type": "pay",
                    "name": "mbr_payment"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "dynamic_array_of_structs_get_item_by_index_in_uint64_array",
            "args": [
                {
                    "type": "uint64",
                    "name": "struct_index"
                },
                {
                    "type": "uint64",
                    "name": "index"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "dynamic_array_of_structs_find_item_index_in_uint64_array",
            "args": [
                {
                    "type": "uint64",
                    "name": "struct_index"
                },
                {
                    "type": "uint64",
                    "name": "target_uint64"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "dynamic_array_of_structs_adjust_item_at_index",
            "args": [
                {
                    "type": "uint64",
                    "name": "struct_index"
                },
                {
                    "type": "uint64",
                    "name": "index"
                },
                {
                    "type": "uint64",
                    "name": "new_num"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "test_box_map": {
                    "keyType": "address",
                    "valueType": "SomeStruct",
                    "prefix": "dDE="
                },
                "test_nested_struct_box_map": {
                    "keyType": "address",
                    "valueType": "(uint64,uint256,byte[],uint64[],uint64)[]",
                    "prefix": "dDI="
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        37
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        112
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        192,
                        207,
                        405,
                        420
                    ],
                    "errorMessage": "account funded"
                },
                {
                    "pc": [
                        345
                    ],
                    "errorMessage": "check self.test_box_map entry exists"
                },
                {
                    "pc": [
                        646
                    ],
                    "errorMessage": "check self.test_nested_struct_box_map entry exists"
                },
                {
                    "pc": [
                        368,
                        671,
                        720,
                        734
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        477,
                        580
                    ],
                    "errorMessage": "index out of bounds"
                },
                {
                    "pc": [
                        157,
                        400
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CyAEAgEACCYEAnQxAnQyBBUffHUIAAAAAAAAAAAxG0EARzEZFEQxGESCCATE/Aj3BCURhJwERbDqvgSD1SG1BKhD9vsESRa1nwSe1e6LBCoWxGU2GgCOCAAdAHQAkQDlARwBSQGFAg4AMRkUMRgUEEOKAQCxMQCL/7IIsgcjshAksgGziTYaATYaAjYaAzYaBDYaBTEWIwlJOBAjEkRPBU8FUIACADRQSwQVgTQIFlcGAlBPAlBPA1BPAlAyCnMBRCgxAFBJvEhPAr8yCnMBREwJTDgITAmI/5cjQzYaARcoMQBQSYEqIroXIghPAiULCCW6KkxQsCNDJEk2GgEoMQBQRwKBKiK6FyK6FyRJSwIMQQAySwJJgSoiuhciCEsCJQsIJbpJRQdLBKhBABBJSwZFBhZLBUxQKkxQsCNDSSMIRQFC/8ckK0UGQv/mNhoBFzYaAigxAFC+REmBKllLARVLAksCTwJSTwQlCyIITwRdTwIkTwNYTFAoMQBQSbxITL8jQzYaATEWIwlJOBAjEkQyCnMBRCkxAFBJvEhPA78yCnMBREwJTDgITAmI/sIjQzYaARc2GgIXKTEAUCJPAwsiCEsBTCK6FyIISYEqCEsCTCK6FwhKIroXSwMNRCIITwIlCwgluipMULAjQyRJNhoBFzYaAkwpMQBQSU4CIk8CCyIISU4CSwFMIroXIghJgSoISwJMIroXCCK6FyRJSwIMQQBKSwNJSwQiuhciCEmBKghLAkwiuhcISiK6F0sDSU8CDERMIghMJQsIJbpJRQhLBahBABBJSwdFBxZLBkxQKkxQsCNDSSMIRQFC/68kK0UHQv/mNhoBFzYaAhc2GgMpMQBQvkRJVwIASwEkWUsFIgtLAkxZSwYjCEsCSwEJSwQVTwIiC0sFSwFZSwJLAU8FTUsGSwVPAlJJgSpZSwEVSwJLAk8CUk8LJQsiCE8LXU8CJE8DWExQSwhPBgxETwZRAAJJTggXSU8ICSMJSwVPBE8CTUlLBglOB0sCFU4HSwYkTwdSTwNQTwVPAk8FUlBOAiILTElLAgxBACBLAklLAklOA1lLBghLBwkWVwYCSwJMXUUEIghFAUL/2UsFSwNQKTEAUEm8SEy/I0M=",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 1
        }
    },
    "events": [],
    "templateVariables": {}
}