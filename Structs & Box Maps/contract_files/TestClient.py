# flake8: noqa
# fmt: off
# mypy: ignore-errors
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^3.0.0

# common
import dataclasses
import typing
# core algosdk
import algosdk
from algosdk.transaction import OnComplete
from algosdk.atomic_transaction_composer import TransactionSigner
from algosdk.source_map import SourceMap
from algosdk.transaction import Transaction
from algosdk.v2client.models import SimulateTraceConfig
# utils
import algokit_utils
from algokit_utils import AlgorandClient as _AlgoKitAlgorandClient

_APP_SPEC_JSON = r"""{"arcs": [22, 28], "bareActions": {"call": [], "create": ["NoOp"]}, "methods": [{"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "uint64_1"}, {"type": "uint256", "name": "uint256_1"}, {"type": "byte[]", "name": "unknown_length_byte_array"}, {"type": "uint64[]", "name": "unknown_length_uint64_array"}, {"type": "uint64", "name": "uint64_2"}, {"type": "pay", "name": "mbr_payment"}], "name": "write_box", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "index"}], "name": "get_item_by_index_in_uint64_array", "returns": {"type": "uint64"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "target_uint64"}], "name": "find_item_index_in_uint64_array", "returns": {"type": "(uint64,uint64)"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "index"}, {"type": "uint64", "name": "new_num"}], "name": "adjust_item_at_index", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "(uint64,uint256,byte[],uint64[],uint64)[]", "name": "dynamic_structs"}, {"type": "pay", "name": "mbr_payment"}], "name": "dynamic_array_of_structs_write_box", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "struct_index"}, {"type": "uint64", "name": "index"}], "name": "dynamic_array_of_structs_get_item_by_index_in_uint64_array", "returns": {"type": "uint64"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "struct_index"}, {"type": "uint64", "name": "target_uint64"}], "name": "dynamic_array_of_structs_find_item_index_in_uint64_array", "returns": {"type": "(uint64,uint64)"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "struct_index"}, {"type": "uint64", "name": "index"}, {"type": "uint64", "name": "new_num"}], "name": "dynamic_array_of_structs_adjust_item_at_index", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}], "name": "Test", "state": {"keys": {"box": {}, "global": {}, "local": {}}, "maps": {"box": {"test_box_map": {"keyType": "address", "valueType": "SomeStruct", "prefix": "dDE="}, "test_nested_struct_box_map": {"keyType": "address", "valueType": "(uint64,uint256,byte[],uint64[],uint64)[]", "prefix": "dDI="}}, "global": {}, "local": {}}, "schema": {"global": {"bytes": 0, "ints": 0}, "local": {"bytes": 0, "ints": 0}}}, "structs": {"SomeStruct": [{"name": "uint64_1", "type": "uint64"}, {"name": "uint256_1", "type": "uint256"}, {"name": "unknown_length_byte_array", "type": "byte[]"}, {"name": "unknown_length_uint64_array", "type": "uint64[]"}, {"name": "uint64_2", "type": "uint64"}]}, "byteCode": {"approval": "CyAEAgEACCYEAnQxAnQyBBUffHUIAAAAAAAAAAAxG0EARzEZFEQxGESCCATE/Aj3BCURhJwERbDqvgSD1SG1BKhD9vsESRa1nwSe1e6LBCoWxGU2GgCOCAAdAHQAkQDlARwBSQGFAg4AMRkUMRgUEEOKAQCxMQCL/7IIsgcjshAksgGziTYaATYaAjYaAzYaBDYaBTEWIwlJOBAjEkRPBU8FUIACADRQSwQVgTQIFlcGAlBPAlBPA1BPAlAyCnMBRCgxAFBJvEhPAr8yCnMBREwJTDgITAmI/5cjQzYaARcoMQBQSYEqIroXIghPAiULCCW6KkxQsCNDJEk2GgEoMQBQRwKBKiK6FyK6FyRJSwIMQQAySwJJgSoiuhciCEsCJQsIJbpJRQdLBKhBABBJSwZFBhZLBUxQKkxQsCNDSSMIRQFC/8ckK0UGQv/mNhoBFzYaAigxAFC+REmBKllLARVLAksCTwJSTwQlCyIITwRdTwIkTwNYTFAoMQBQSbxITL8jQzYaATEWIwlJOBAjEkQyCnMBRCkxAFBJvEhPA78yCnMBREwJTDgITAmI/sIjQzYaARc2GgIXKTEAUCJPAwsiCEsBTCK6FyIISYEqCEsCTCK6FwhKIroXSwMNRCIITwIlCwgluipMULAjQyRJNhoBFzYaAkwpMQBQSU4CIk8CCyIISU4CSwFMIroXIghJgSoISwJMIroXCCK6FyRJSwIMQQBKSwNJSwQiuhciCEmBKghLAkwiuhcISiK6F0sDSU8CDERMIghMJQsIJbpJRQhLBahBABBJSwdFBxZLBkxQKkxQsCNDSSMIRQFC/68kK0UHQv/mNhoBFzYaAhc2GgMpMQBQvkRJVwIASwEkWUsFIgtLAkxZSwYjCEsCSwEJSwQVTwIiC0sFSwFZSwJLAU8FTUsGSwVPAlJJgSpZSwEVSwJLAk8CUk8LJQsiCE8LXU8CJE8DWExQSwhPBgxETwZRAAJJTggXSU8ICSMJSwVPBE8CTUlLBglOB0sCFU4HSwYkTwdSTwNQTwVPAk8FUlBOAiILTElLAgxBACBLAklLAklOA1lLBghLBwkWVwYCSwJMXUUEIghFAUL/2UsFSwNQKTEAUEm8SEy/I0M=", "clear": "C4EBQw=="}, "compilerInfo": {"compiler": "puya", "compilerVersion": {"major": 5, "minor": 0, "patch": 1}}, "events": [], "networks": {}, "source": {"approval": "", "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"}, "sourceInfo": {"approval": {"pcOffsetMethod": "none", "sourceInfo": [{"pc": [37], "errorMessage": "OnCompletion must be NoOp"}, {"pc": [112], "errorMessage": "OnCompletion must be NoOp && can only call when creating"}, {"pc": [192, 207, 405, 420], "errorMessage": "account funded"}, {"pc": [345], "errorMessage": "check self.test_box_map entry exists"}, {"pc": [646], "errorMessage": "check self.test_nested_struct_box_map entry exists"}, {"pc": [368, 671, 720, 734], "errorMessage": "index access is out of bounds"}, {"pc": [477, 580], "errorMessage": "index out of bounds"}, {"pc": [157, 400], "errorMessage": "transaction type is pay"}]}, "clear": {"pcOffsetMethod": "none", "sourceInfo": []}}, "templateVariables": {}}"""
APP_SPEC = algokit_utils.Arc56Contract.from_json(_APP_SPEC_JSON)

def _parse_abi_args(args: object | None = None) -> list[object] | None:
    """Helper to parse ABI args into the format expected by underlying client"""
    if args is None:
        return None

    def convert_dataclass(value: object) -> object:
        if dataclasses.is_dataclass(value):
            return tuple(convert_dataclass(getattr(value, field.name)) for field in dataclasses.fields(value))
        elif isinstance(value, (list, tuple)):
            return type(value)(convert_dataclass(item) for item in value)
        return value

    match args:
        case tuple():
            method_args = list(args)
        case _ if dataclasses.is_dataclass(args):
            method_args = [getattr(args, field.name) for field in dataclasses.fields(args)]
        case _:
            raise ValueError("Invalid 'args' type. Expected 'tuple' or 'TypedDict' for respective typed arguments.")

    return [
        convert_dataclass(arg) if not isinstance(arg, algokit_utils.AppMethodCallTransactionArgument) else arg
        for arg in method_args
    ] if method_args else None

def _init_dataclass(cls: type, data: dict) -> object:
    """
    Recursively instantiate a dataclass of type `cls` from `data`.

    For each field on the dataclass, if the field type is also a dataclass
    and the corresponding data is a dict, instantiate that field recursively.
    """
    field_values = {}
    for field in dataclasses.fields(cls):
        field_value = data.get(field.name)
        # Check if the field expects another dataclass and the value is a dict.
        if dataclasses.is_dataclass(field.type) and isinstance(field_value, dict):
            field_values[field.name] = _init_dataclass(typing.cast(type, field.type), field_value)
        else:
            field_values[field.name] = field_value
    return cls(**field_values)

@dataclasses.dataclass(frozen=True)
class SomeStruct:
    """Struct for SomeStruct"""
    uint64_1: int
    uint256_1: int
    unknown_length_byte_array: bytes
    unknown_length_uint64_array: list[int]
    uint64_2: int


@dataclasses.dataclass(frozen=True, kw_only=True)
class WriteBoxArgs:
    """Dataclass for write_box arguments"""
    uint64_1: int
    uint256_1: int
    unknown_length_byte_array: bytes | str
    unknown_length_uint64_array: list[int]
    uint64_2: int
    mbr_payment: algokit_utils.AppMethodCallTransactionArgument

    @property
    def abi_method_signature(self) -> str:
        return "write_box(uint64,uint256,byte[],uint64[],uint64,pay)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class GetItemByIndexInUint64ArrayArgs:
    """Dataclass for get_item_by_index_in_uint64_array arguments"""
    index: int

    @property
    def abi_method_signature(self) -> str:
        return "get_item_by_index_in_uint64_array(uint64)uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class FindItemIndexInUint64ArrayArgs:
    """Dataclass for find_item_index_in_uint64_array arguments"""
    target_uint64: int

    @property
    def abi_method_signature(self) -> str:
        return "find_item_index_in_uint64_array(uint64)(uint64,uint64)"

@dataclasses.dataclass(frozen=True, kw_only=True)
class AdjustItemAtIndexArgs:
    """Dataclass for adjust_item_at_index arguments"""
    index: int
    new_num: int

    @property
    def abi_method_signature(self) -> str:
        return "adjust_item_at_index(uint64,uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class DynamicArrayOfStructsWriteBoxArgs:
    """Dataclass for dynamic_array_of_structs_write_box arguments"""
    dynamic_structs: list[tuple[int, int, bytes | str, list[int], int]]
    mbr_payment: algokit_utils.AppMethodCallTransactionArgument

    @property
    def abi_method_signature(self) -> str:
        return "dynamic_array_of_structs_write_box((uint64,uint256,byte[],uint64[],uint64)[],pay)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class DynamicArrayOfStructsGetItemByIndexInUint64ArrayArgs:
    """Dataclass for dynamic_array_of_structs_get_item_by_index_in_uint64_array arguments"""
    struct_index: int
    index: int

    @property
    def abi_method_signature(self) -> str:
        return "dynamic_array_of_structs_get_item_by_index_in_uint64_array(uint64,uint64)uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class DynamicArrayOfStructsFindItemIndexInUint64ArrayArgs:
    """Dataclass for dynamic_array_of_structs_find_item_index_in_uint64_array arguments"""
    struct_index: int
    target_uint64: int

    @property
    def abi_method_signature(self) -> str:
        return "dynamic_array_of_structs_find_item_index_in_uint64_array(uint64,uint64)(uint64,uint64)"

@dataclasses.dataclass(frozen=True, kw_only=True)
class DynamicArrayOfStructsAdjustItemAtIndexArgs:
    """Dataclass for dynamic_array_of_structs_adjust_item_at_index arguments"""
    struct_index: int
    index: int
    new_num: int

    @property
    def abi_method_signature(self) -> str:
        return "dynamic_array_of_structs_adjust_item_at_index(uint64,uint64,uint64)void"


class TestParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def write_box(
        self,
        args: tuple[int, int, bytes | str, list[int], int, algokit_utils.AppMethodCallTransactionArgument] | WriteBoxArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "write_box(uint64,uint256,byte[],uint64[],uint64,pay)void",
            "args": method_args,
        }))

    def get_item_by_index_in_uint64_array(
        self,
        args: tuple[int] | GetItemByIndexInUint64ArrayArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_item_by_index_in_uint64_array(uint64)uint64",
            "args": method_args,
        }))

    def find_item_index_in_uint64_array(
        self,
        args: tuple[int] | FindItemIndexInUint64ArrayArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "find_item_index_in_uint64_array(uint64)(uint64,uint64)",
            "args": method_args,
        }))

    def adjust_item_at_index(
        self,
        args: tuple[int, int] | AdjustItemAtIndexArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "adjust_item_at_index(uint64,uint64)void",
            "args": method_args,
        }))

    def dynamic_array_of_structs_write_box(
        self,
        args: tuple[list[tuple[int, int, bytes | str, list[int], int]], algokit_utils.AppMethodCallTransactionArgument] | DynamicArrayOfStructsWriteBoxArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "dynamic_array_of_structs_write_box((uint64,uint256,byte[],uint64[],uint64)[],pay)void",
            "args": method_args,
        }))

    def dynamic_array_of_structs_get_item_by_index_in_uint64_array(
        self,
        args: tuple[int, int] | DynamicArrayOfStructsGetItemByIndexInUint64ArrayArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "dynamic_array_of_structs_get_item_by_index_in_uint64_array(uint64,uint64)uint64",
            "args": method_args,
        }))

    def dynamic_array_of_structs_find_item_index_in_uint64_array(
        self,
        args: tuple[int, int] | DynamicArrayOfStructsFindItemIndexInUint64ArrayArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "dynamic_array_of_structs_find_item_index_in_uint64_array(uint64,uint64)(uint64,uint64)",
            "args": method_args,
        }))

    def dynamic_array_of_structs_adjust_item_at_index(
        self,
        args: tuple[int, int, int] | DynamicArrayOfStructsAdjustItemAtIndexArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "dynamic_array_of_structs_adjust_item_at_index(uint64,uint64,uint64)void",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> algokit_utils.AppCallParams:
        return self.app_client.params.bare.clear_state(
            params,
            
        )


class TestCreateTransactionParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def write_box(
        self,
        args: tuple[int, int, bytes | str, list[int], int, algokit_utils.AppMethodCallTransactionArgument] | WriteBoxArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "write_box(uint64,uint256,byte[],uint64[],uint64,pay)void",
            "args": method_args,
        }))

    def get_item_by_index_in_uint64_array(
        self,
        args: tuple[int] | GetItemByIndexInUint64ArrayArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_item_by_index_in_uint64_array(uint64)uint64",
            "args": method_args,
        }))

    def find_item_index_in_uint64_array(
        self,
        args: tuple[int] | FindItemIndexInUint64ArrayArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "find_item_index_in_uint64_array(uint64)(uint64,uint64)",
            "args": method_args,
        }))

    def adjust_item_at_index(
        self,
        args: tuple[int, int] | AdjustItemAtIndexArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "adjust_item_at_index(uint64,uint64)void",
            "args": method_args,
        }))

    def dynamic_array_of_structs_write_box(
        self,
        args: tuple[list[tuple[int, int, bytes | str, list[int], int]], algokit_utils.AppMethodCallTransactionArgument] | DynamicArrayOfStructsWriteBoxArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "dynamic_array_of_structs_write_box((uint64,uint256,byte[],uint64[],uint64)[],pay)void",
            "args": method_args,
        }))

    def dynamic_array_of_structs_get_item_by_index_in_uint64_array(
        self,
        args: tuple[int, int] | DynamicArrayOfStructsGetItemByIndexInUint64ArrayArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "dynamic_array_of_structs_get_item_by_index_in_uint64_array(uint64,uint64)uint64",
            "args": method_args,
        }))

    def dynamic_array_of_structs_find_item_index_in_uint64_array(
        self,
        args: tuple[int, int] | DynamicArrayOfStructsFindItemIndexInUint64ArrayArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "dynamic_array_of_structs_find_item_index_in_uint64_array(uint64,uint64)(uint64,uint64)",
            "args": method_args,
        }))

    def dynamic_array_of_structs_adjust_item_at_index(
        self,
        args: tuple[int, int, int] | DynamicArrayOfStructsAdjustItemAtIndexArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "dynamic_array_of_structs_adjust_item_at_index(uint64,uint64,uint64)void",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> Transaction:
        return self.app_client.create_transaction.bare.clear_state(
            params,
            
        )


class TestSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def write_box(
        self,
        args: tuple[int, int, bytes | str, list[int], int, algokit_utils.AppMethodCallTransactionArgument] | WriteBoxArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "write_box(uint64,uint256,byte[],uint64[],uint64,pay)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def get_item_by_index_in_uint64_array(
        self,
        args: tuple[int] | GetItemByIndexInUint64ArrayArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_item_by_index_in_uint64_array(uint64)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def find_item_index_in_uint64_array(
        self,
        args: tuple[int] | FindItemIndexInUint64ArrayArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[tuple[int, int]]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "find_item_index_in_uint64_array(uint64)(uint64,uint64)",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[tuple[int, int]], parsed_response)

    def adjust_item_at_index(
        self,
        args: tuple[int, int] | AdjustItemAtIndexArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "adjust_item_at_index(uint64,uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def dynamic_array_of_structs_write_box(
        self,
        args: tuple[list[tuple[int, int, bytes | str, list[int], int]], algokit_utils.AppMethodCallTransactionArgument] | DynamicArrayOfStructsWriteBoxArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "dynamic_array_of_structs_write_box((uint64,uint256,byte[],uint64[],uint64)[],pay)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def dynamic_array_of_structs_get_item_by_index_in_uint64_array(
        self,
        args: tuple[int, int] | DynamicArrayOfStructsGetItemByIndexInUint64ArrayArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "dynamic_array_of_structs_get_item_by_index_in_uint64_array(uint64,uint64)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def dynamic_array_of_structs_find_item_index_in_uint64_array(
        self,
        args: tuple[int, int] | DynamicArrayOfStructsFindItemIndexInUint64ArrayArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[tuple[int, int]]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "dynamic_array_of_structs_find_item_index_in_uint64_array(uint64,uint64)(uint64,uint64)",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[tuple[int, int]], parsed_response)

    def dynamic_array_of_structs_adjust_item_at_index(
        self,
        args: tuple[int, int, int] | DynamicArrayOfStructsAdjustItemAtIndexArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "dynamic_array_of_structs_adjust_item_at_index(uint64,uint64,uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[algokit_utils.ABIReturn]:
        return self.app_client.send.bare.clear_state(
            params,
            send_params=send_params,
        )


class TestState:
    """Methods to access state for the current Test app"""

    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def box(
        self
    ) -> "_BoxState":
            """Methods to access box for the current app"""
            return _BoxState(self.app_client)

class _BoxState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {
            "SomeStruct": SomeStruct
        }

    def get_all(self) -> dict[str, typing.Any]:
        """Get all current keyed values from box state"""
        result = self.app_client.state.box.get_all()
        if not result:
            return {}

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.box.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return converted

    @property
    def test_box_map(self) -> "_MapState[str, SomeStruct]":
        """Get values from the test_box_map map in box state"""
        return _MapState(
            self.app_client.state.box,
            "test_box_map",
            self._struct_classes.get("SomeStruct")
        )

    @property
    def test_nested_struct_box_map(self) -> "_MapState[str, list[tuple[int, int, bytes, list[int], int]]]":
        """Get values from the test_nested_struct_box_map map in box state"""
        return _MapState(
            self.app_client.state.box,
            "test_nested_struct_box_map",
            None
        )

_KeyType = typing.TypeVar("_KeyType")
_ValueType = typing.TypeVar("_ValueType")

class _AppClientStateMethodsProtocol(typing.Protocol):
    def get_map(self, map_name: str) -> dict[typing.Any, typing.Any]:
        ...
    def get_map_value(self, map_name: str, key: typing.Any) -> typing.Any | None:
        ...

class _MapState(typing.Generic[_KeyType, _ValueType]):
    """Generic class for accessing state maps with strongly typed keys and values"""

    def __init__(self, state_accessor: _AppClientStateMethodsProtocol, map_name: str,
                struct_class: typing.Type[_ValueType] | None = None):
        self._state_accessor = state_accessor
        self._map_name = map_name
        self._struct_class = struct_class

    def get_map(self) -> dict[_KeyType, _ValueType]:
        """Get all current values in the map"""
        result = self._state_accessor.get_map(self._map_name)
        if self._struct_class and result:
            return {k: _init_dataclass(self._struct_class, v) if isinstance(v, dict) else v
                    for k, v in result.items()}  # type: ignore
        return typing.cast(dict[_KeyType, _ValueType], result or {})

    def get_value(self, key: _KeyType) -> _ValueType | None:
        """Get a value from the map by key"""
        key_value = dataclasses.asdict(key) if dataclasses.is_dataclass(key) else key  # type: ignore
        value = self._state_accessor.get_map_value(self._map_name, key_value)
        if value is not None and self._struct_class and isinstance(value, dict):
            return _init_dataclass(self._struct_class, value)  # type: ignore
        return typing.cast(_ValueType | None, value)


class TestClient:
    """Client for interacting with Test smart contract"""

    @typing.overload
    def __init__(self, app_client: algokit_utils.AppClient) -> None: ...
    
    @typing.overload
    def __init__(
        self,
        *,
        algorand: _AlgoKitAlgorandClient,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None: ...

    def __init__(
        self,
        app_client: algokit_utils.AppClient | None = None,
        *,
        algorand: _AlgoKitAlgorandClient | None = None,
        app_id: int | None = None,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None:
        if app_client:
            self.app_client = app_client
        elif algorand and app_id:
            self.app_client = algokit_utils.AppClient(
                algokit_utils.AppClientParams(
                    algorand=algorand,
                    app_spec=APP_SPEC,
                    app_id=app_id,
                    app_name=app_name,
                    default_sender=default_sender,
                    default_signer=default_signer,
                    approval_source_map=approval_source_map,
                    clear_source_map=clear_source_map,
                )
            )
        else:
            raise ValueError("Either app_client or algorand and app_id must be provided")
    
        self.params = TestParams(self.app_client)
        self.create_transaction = TestCreateTransactionParams(self.app_client)
        self.send = TestSend(self.app_client)
        self.state = TestState(self.app_client)

    @staticmethod
    def from_creator_and_name(
        creator_address: str,
        app_name: str,
        algorand: _AlgoKitAlgorandClient,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
    ) -> "TestClient":
        return TestClient(
            algokit_utils.AppClient.from_creator_and_name(
                creator_address=creator_address,
                app_name=app_name,
                app_spec=APP_SPEC,
                algorand=algorand,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
                ignore_cache=ignore_cache,
                app_lookup_cache=app_lookup_cache,
            )
        )
    
    @staticmethod
    def from_network(
        algorand: _AlgoKitAlgorandClient,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "TestClient":
        return TestClient(
            algokit_utils.AppClient.from_network(
                app_spec=APP_SPEC,
                algorand=algorand,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    @property
    def app_id(self) -> int:
        return self.app_client.app_id
    
    @property
    def app_address(self) -> str:
        return self.app_client.app_address
    
    @property
    def app_name(self) -> str:
        return self.app_client.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_client.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_client.algorand

    def clone(
        self,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "TestClient":
        return TestClient(
            self.app_client.clone(
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    def new_group(self) -> "TestComposer":
        return TestComposer(self)

    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["write_box(uint64,uint256,byte[],uint64[],uint64,pay)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_item_by_index_in_uint64_array(uint64)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["find_item_index_in_uint64_array(uint64)(uint64,uint64)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> tuple[int, int] | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["adjust_item_at_index(uint64,uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["dynamic_array_of_structs_write_box((uint64,uint256,byte[],uint64[],uint64)[],pay)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["dynamic_array_of_structs_get_item_by_index_in_uint64_array(uint64,uint64)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["dynamic_array_of_structs_find_item_index_in_uint64_array(uint64,uint64)(uint64,uint64)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> tuple[int, int] | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["dynamic_array_of_structs_adjust_item_at_index(uint64,uint64,uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None: ...

    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None | int | tuple[int, int]:
        """Decode ABI return value for the given method."""
        if return_value is None:
            return None
    
        arc56_method = self.app_spec.get_arc56_method(method)
        decoded = return_value.get_arc56_value(arc56_method, self.app_spec.structs)
    
        # If method returns a struct, convert the dict to appropriate dataclass
        if (arc56_method and
            arc56_method.returns and
            arc56_method.returns.struct and
            isinstance(decoded, dict)):
            struct_class = globals().get(arc56_method.returns.struct)
            if struct_class:
                return struct_class(**typing.cast(dict, decoded))
        return decoded


@dataclasses.dataclass(frozen=True)
class TestBareCallCreateParams(algokit_utils.AppClientBareCallCreateParams):
    """Parameters for creating Test contract with bare calls"""
    on_complete: typing.Literal[OnComplete.NoOpOC] | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientBareCallCreateParams:
        return algokit_utils.AppClientBareCallCreateParams(**self.__dict__)

class TestFactory(algokit_utils.TypedAppFactoryProtocol[TestBareCallCreateParams, None, None]):
    """Factory for deploying and managing TestClient smart contracts"""

    def __init__(
        self,
        algorand: _AlgoKitAlgorandClient,
        *,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        version: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ):
        self.app_factory = algokit_utils.AppFactory(
            params=algokit_utils.AppFactoryParams(
                algorand=algorand,
                app_spec=APP_SPEC,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                version=version,
                compilation_params=compilation_params,
            )
        )
        self.params = TestFactoryParams(self.app_factory)
        self.create_transaction = TestFactoryCreateTransaction(self.app_factory)
        self.send = TestFactorySend(self.app_factory)

    @property
    def app_name(self) -> str:
        return self.app_factory.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_factory.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_factory.algorand

    def deploy(
        self,
        *,
        on_update: algokit_utils.OnUpdate | None = None,
        on_schema_break: algokit_utils.OnSchemaBreak | None = None,
        create_params: TestBareCallCreateParams | None = None,
        update_params: None = None,
        delete_params: None = None,
        existing_deployments: algokit_utils.ApplicationLookup | None = None,
        ignore_cache: bool = False,
        app_name: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
    ) -> tuple[TestClient, algokit_utils.AppFactoryDeployResult]:
        """Deploy the application"""
        deploy_response = self.app_factory.deploy(
            on_update=on_update,
            on_schema_break=on_schema_break,
            create_params=create_params.to_algokit_utils_params() if create_params else None,
            update_params=update_params,
            delete_params=delete_params,
            existing_deployments=existing_deployments,
            ignore_cache=ignore_cache,
            app_name=app_name,
            compilation_params=compilation_params,
            send_params=send_params,
        )

        return TestClient(deploy_response[0]), deploy_response[1]

    def get_app_client_by_creator_and_name(
        self,
        creator_address: str,
        app_name: str,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> TestClient:
        """Get an app client by creator address and name"""
        return TestClient(
            self.app_factory.get_app_client_by_creator_and_name(
                creator_address,
                app_name,
                default_sender,
                default_signer,
                ignore_cache,
                app_lookup_cache,
                approval_source_map,
                clear_source_map,
            )
        )

    def get_app_client_by_id(
        self,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> TestClient:
        """Get an app client by app ID"""
        return TestClient(
            self.app_factory.get_app_client_by_id(
                app_id,
                app_name,
                default_sender,
                default_signer,
                approval_source_map,
                clear_source_map,
            )
        )


class TestFactoryParams:
    """Parameters for creating transactions for Test contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = TestFactoryCreateParams(app_factory)
        self.update = TestFactoryUpdateParams(app_factory)
        self.delete = TestFactoryDeleteParams(app_factory)

class TestFactoryCreateParams:
    """Parameters for 'create' operations of Test contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateParams:
        """Creates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            compilation_params=compilation_params)

    def write_box(
        self,
        args: tuple[int, int, bytes | str, list[int], int, algokit_utils.AppMethodCallTransactionArgument] | WriteBoxArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the write_box(uint64,uint256,byte[],uint64[],uint64,pay)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "write_box(uint64,uint256,byte[],uint64[],uint64,pay)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_item_by_index_in_uint64_array(
        self,
        args: tuple[int] | GetItemByIndexInUint64ArrayArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_item_by_index_in_uint64_array(uint64)uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_item_by_index_in_uint64_array(uint64)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def find_item_index_in_uint64_array(
        self,
        args: tuple[int] | FindItemIndexInUint64ArrayArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the find_item_index_in_uint64_array(uint64)(uint64,uint64) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "find_item_index_in_uint64_array(uint64)(uint64,uint64)",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def adjust_item_at_index(
        self,
        args: tuple[int, int] | AdjustItemAtIndexArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the adjust_item_at_index(uint64,uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "adjust_item_at_index(uint64,uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def dynamic_array_of_structs_write_box(
        self,
        args: tuple[list[tuple[int, int, bytes | str, list[int], int]], algokit_utils.AppMethodCallTransactionArgument] | DynamicArrayOfStructsWriteBoxArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the dynamic_array_of_structs_write_box((uint64,uint256,byte[],uint64[],uint64)[],pay)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "dynamic_array_of_structs_write_box((uint64,uint256,byte[],uint64[],uint64)[],pay)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def dynamic_array_of_structs_get_item_by_index_in_uint64_array(
        self,
        args: tuple[int, int] | DynamicArrayOfStructsGetItemByIndexInUint64ArrayArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the dynamic_array_of_structs_get_item_by_index_in_uint64_array(uint64,uint64)uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "dynamic_array_of_structs_get_item_by_index_in_uint64_array(uint64,uint64)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def dynamic_array_of_structs_find_item_index_in_uint64_array(
        self,
        args: tuple[int, int] | DynamicArrayOfStructsFindItemIndexInUint64ArrayArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the dynamic_array_of_structs_find_item_index_in_uint64_array(uint64,uint64)(uint64,uint64) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "dynamic_array_of_structs_find_item_index_in_uint64_array(uint64,uint64)(uint64,uint64)",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def dynamic_array_of_structs_adjust_item_at_index(
        self,
        args: tuple[int, int, int] | DynamicArrayOfStructsAdjustItemAtIndexArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the dynamic_array_of_structs_adjust_item_at_index(uint64,uint64,uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "dynamic_array_of_structs_adjust_item_at_index(uint64,uint64,uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

class TestFactoryUpdateParams:
    """Parameters for 'update' operations of Test contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppUpdateParams:
        """Updates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_update(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )

class TestFactoryDeleteParams:
    """Parameters for 'delete' operations of Test contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppDeleteParams:
        """Deletes an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_delete(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )


class TestFactoryCreateTransaction:
    """Create transactions for Test contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = TestFactoryCreateTransactionCreate(app_factory)


class TestFactoryCreateTransactionCreate:
    """Create new instances of Test contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
    ) -> Transaction:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.create_transaction.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
        )


class TestFactorySend:
    """Send calls to Test contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = TestFactorySendCreate(app_factory)


class TestFactorySendCreate:
    """Send create calls to Test contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ) -> tuple[TestClient, algokit_utils.SendAppCreateTransactionResult]:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        result = self.app_factory.send.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            send_params=send_params,
            compilation_params=compilation_params
        )
        return TestClient(result[0]), result[1]


class TestComposer:
    """Composer for creating transaction groups for Test contract calls"""

    def __init__(self, client: "TestClient"):
        self.client = client
        self._composer = client.algorand.new_group()
        self._result_mappers: list[typing.Callable[[algokit_utils.ABIReturn | None], object] | None] = []

    def write_box(
        self,
        args: tuple[int, int, bytes | str, list[int], int, algokit_utils.AppMethodCallTransactionArgument] | WriteBoxArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "TestComposer":
        self._composer.add_app_call_method_call(
            self.client.params.write_box(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "write_box(uint64,uint256,byte[],uint64[],uint64,pay)void", v
            )
        )
        return self

    def get_item_by_index_in_uint64_array(
        self,
        args: tuple[int] | GetItemByIndexInUint64ArrayArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "TestComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_item_by_index_in_uint64_array(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_item_by_index_in_uint64_array(uint64)uint64", v
            )
        )
        return self

    def find_item_index_in_uint64_array(
        self,
        args: tuple[int] | FindItemIndexInUint64ArrayArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "TestComposer":
        self._composer.add_app_call_method_call(
            self.client.params.find_item_index_in_uint64_array(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "find_item_index_in_uint64_array(uint64)(uint64,uint64)", v
            )
        )
        return self

    def adjust_item_at_index(
        self,
        args: tuple[int, int] | AdjustItemAtIndexArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "TestComposer":
        self._composer.add_app_call_method_call(
            self.client.params.adjust_item_at_index(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "adjust_item_at_index(uint64,uint64)void", v
            )
        )
        return self

    def dynamic_array_of_structs_write_box(
        self,
        args: tuple[list[tuple[int, int, bytes | str, list[int], int]], algokit_utils.AppMethodCallTransactionArgument] | DynamicArrayOfStructsWriteBoxArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "TestComposer":
        self._composer.add_app_call_method_call(
            self.client.params.dynamic_array_of_structs_write_box(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "dynamic_array_of_structs_write_box((uint64,uint256,byte[],uint64[],uint64)[],pay)void", v
            )
        )
        return self

    def dynamic_array_of_structs_get_item_by_index_in_uint64_array(
        self,
        args: tuple[int, int] | DynamicArrayOfStructsGetItemByIndexInUint64ArrayArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "TestComposer":
        self._composer.add_app_call_method_call(
            self.client.params.dynamic_array_of_structs_get_item_by_index_in_uint64_array(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "dynamic_array_of_structs_get_item_by_index_in_uint64_array(uint64,uint64)uint64", v
            )
        )
        return self

    def dynamic_array_of_structs_find_item_index_in_uint64_array(
        self,
        args: tuple[int, int] | DynamicArrayOfStructsFindItemIndexInUint64ArrayArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "TestComposer":
        self._composer.add_app_call_method_call(
            self.client.params.dynamic_array_of_structs_find_item_index_in_uint64_array(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "dynamic_array_of_structs_find_item_index_in_uint64_array(uint64,uint64)(uint64,uint64)", v
            )
        )
        return self

    def dynamic_array_of_structs_adjust_item_at_index(
        self,
        args: tuple[int, int, int] | DynamicArrayOfStructsAdjustItemAtIndexArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "TestComposer":
        self._composer.add_app_call_method_call(
            self.client.params.dynamic_array_of_structs_adjust_item_at_index(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "dynamic_array_of_structs_adjust_item_at_index(uint64,uint64,uint64)void", v
            )
        )
        return self

    def clear_state(
        self,
        *,
        args: list[bytes] | None = None,
        params: algokit_utils.CommonAppCallParams | None = None,
    ) -> "TestComposer":
        params=params or algokit_utils.CommonAppCallParams()
        self._composer.add_app_call(
            self.client.params.clear_state(
                algokit_utils.AppClientBareCallParams(
                    **{
                        **dataclasses.asdict(params),
                        "args": args
                    }
                )
            )
        )
        return self
    
    def add_transaction(
        self, txn: Transaction, signer: TransactionSigner | None = None
    ) -> "TestComposer":
        self._composer.add_transaction(txn, signer)
        return self
    
    def composer(self) -> algokit_utils.TransactionComposer:
        return self._composer
    
    def simulate(
        self,
        allow_more_logs: bool | None = None,
        allow_empty_signatures: bool | None = None,
        allow_unnamed_resources: bool | None = None,
        extra_opcode_budget: int | None = None,
        exec_trace_config: SimulateTraceConfig | None = None,
        simulation_round: int | None = None,
        skip_signatures: bool | None = None,
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.simulate(
            allow_more_logs=allow_more_logs,
            allow_empty_signatures=allow_empty_signatures,
            allow_unnamed_resources=allow_unnamed_resources,
            extra_opcode_budget=extra_opcode_budget,
            exec_trace_config=exec_trace_config,
            simulation_round=simulation_round,
            skip_signatures=skip_signatures,
        )
    
    def send(
        self,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.send(send_params)
